package edu.hp.model.biz;

import edu.hp.model.sms.SMSManager;
import edu.hp.model.vo.NotificationsViewImpl;

import edu.hp.model.vo.NotificationsViewRowImpl;

import edu.hp.model.vo.RolesViewImpl;

import java.math.BigDecimal;

import oracle.jbo.Row;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 17 19:34:28 CST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class NotificationModuleImpl extends ApplicationModuleImpl {

    //change to Y, if want to test sms
    private static String isSmsSent = "N";
    private static String TEXT_PREFIX = "[平台消息]： ";
    private static String TEXT_SURFIX = "  [黄浦教育]";

    /**
     * This is the default constructor (do not remove).
     */
    public NotificationModuleImpl() {
    }

    /**
     * Container's getter for Notifications.
     * @return Notifications
     */
    public NotificationsViewImpl getNotifications() {
        return (NotificationsViewImpl)findViewObject("Notifications");
    }

    public void sendNotification(String title, String content, String category, Timestamp eventDate,
                                 BigDecimal priority, String roleId) {


        try {
            //GET VO
            NotificationsViewImpl ntfVO = getNotifications();

            //CREATE AN EMPTY NEW ROW
            NotificationsViewRowImpl newRow = (NotificationsViewRowImpl)ntfVO.createRow();
            newRow.setCategory(category);
            newRow.setContent(content);
            newRow.setEventDate(eventDate);
            newRow.setIsSmsSent(isSmsSent);
            newRow.setPriority(priority);
            newRow.setTitle(title);
            newRow.setToRoleId(roleId);

            //INSERT IT INTO THE CURRENT RESULT SET
            ntfVO.insertRow(newRow);

            //COMMIT THE TRANSACTION
            this.getDBTransaction().commit();


        } catch (Exception e) {

            this.getDBTransaction().rollback();
            //TODO add code to send message to UI
        }
        
        //send the text by SMS
        if (isSmsSent.equals("Y")) {
            //get role vo
            RolesViewImpl roleView = getRoles();
            //query by id
            roleView.queryById(roleId);
            //get emp vo which linked to current row of role vo
            ViewObjectImpl employeesOfRole = this.getEmployeesOfRole();
            //-1 indicates that we will fetch all rows
            employeesOfRole.setRangeSize(-1);
            //execte the query to get result
            employeesOfRole.executeQuery();
            //iteration over the result set
            Row[] allRowsInRange = employeesOfRole.getAllRowsInRange();
            if (allRowsInRange != null && allRowsInRange.length > 0) {
                //get all phone nos
                String[] phoneNos = new String[allRowsInRange.length];

                for (int i = 0; i < allRowsInRange.length; i++) {
                    phoneNos[i] = (String)allRowsInRange[i].getAttribute("Mobile");
                }
                //send the text
                int sent = SMSManager.sendSMS(phoneNos, TEXT_PREFIX + content + TEXT_SURFIX, priority.intValue());
            }

        }


    }

    /**
     * Container's getter for RolesView1.
     * @return RolesView1
     */
    public RolesViewImpl getRoles() {
        return (RolesViewImpl)findViewObject("Roles");
    }

    /**
     * Container's getter for EmployeesView1.
     * @return EmployeesView1
     */
    public ViewObjectImpl getEmployeesOfRole() {
        return (ViewObjectImpl)findViewObject("EmployeesOfRole");
    }

    /**
     * Container's getter for UserRoleViewLink1.
     * @return UserRoleViewLink1
     */
    public ViewLinkImpl getUserRoleViewLink1() {
        return (ViewLinkImpl)findViewLink("UserRoleViewLink1");
    }
}
