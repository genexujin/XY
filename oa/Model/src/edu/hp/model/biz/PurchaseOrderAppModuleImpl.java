package edu.hp.model.biz;

import edu.hp.model.biz.common.PurchaseOrderAppModule;
import edu.hp.model.vo.PurchaseOrderHistorysViewImpl;
import edu.hp.model.vo.PurchaseOrdersViewImpl;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 07 21:05:32 CST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PurchaseOrderAppModuleImpl extends ApplicationModuleImpl implements PurchaseOrderAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public PurchaseOrderAppModuleImpl() {
    }
    
    public void findByUserId(String submitterId) {
        PurchaseOrdersViewImpl po = this.getPurchaseOrdersView();
        po.setApplyViewCriteriaNames(null);
        
        //Do the query        
        System.err.println("In AppModule: submitterId is: " + submitterId);
        if (submitterId != null) {
            po.setsbmtId(submitterId);
            ViewCriteria sIdCriteria = po.getViewCriteria("SubmitterIdCriteria");
            po.setApplyViewCriteriaName(sIdCriteria.getName());
            po.executeQuery();
        }
        
        //Set the lov's value, so on page the correct user will be selected by default in the lov
        ViewObjectImpl eLov = this.getEmployeesViewForLOV();
        eLov.executeQuery();
        Row[] rows = eLov.getAllRowsInRange();
        System.err.println("The lov rows num: " + rows.length);
        if (rows != null) {
            for (Row row : rows) {
                String rowId = ((DBSequence)row.getAttribute("Id")).toString();
                System.err.println("The lov id is: " + rowId);
                if (submitterId.equalsIgnoreCase(rowId)) {
                    System.err.println("In if. Row id is: " + rowId + ". submitter id is: " + submitterId);
                    eLov.setCurrentRow(row);
                    break;
                }
            }
        }
            
    }

    /**
     * Container's getter for PurchaseOrderHistorysView.
     * @return PurchaseOrderHistorysView
     */
    public PurchaseOrderHistorysViewImpl getPurchaseOrderHistorysView() {
        return (PurchaseOrderHistorysViewImpl)findViewObject("PurchaseOrderHistorysView");
    }

    /**
     * Container's getter for PurchaseOrdersView.
     * @return PurchaseOrdersView
     */
    public PurchaseOrdersViewImpl getPurchaseOrdersView() {
        return (PurchaseOrdersViewImpl)findViewObject("PurchaseOrdersView");
    }

    /**
     * Container's getter for ItemCategory.
     * @return ItemCategory
     */
    public ViewObjectImpl getItemCategory() {
        return (ViewObjectImpl)findViewObject("ItemCategory");
    }

    /**
     * Container's getter for PurchaseOrderLinesView.
     * @return PurchaseOrderLinesView
     */
    public ViewObjectImpl getPurchaseOrderLinesView() {
        return (ViewObjectImpl)findViewObject("PurchaseOrderLinesView");
    }

    /**
     * Container's getter for PoState.
     * @return PoState
     */
    public ViewObjectImpl getPoState() {
        return (ViewObjectImpl)findViewObject("PoState");
    }

    /**
     * Container's getter for PoLineCount.
     * @return PoLineCount
     */
    public ViewObjectImpl getPoLineCount() {
        return (ViewObjectImpl)findViewObject("PoLineCount");
    }

    /**
     * Container's getter for EmployeesViewForLOV.
     * @return EmployeesViewForLOV
     */
    public ViewObjectImpl getEmployeesViewForLOV() {
        return (ViewObjectImpl)findViewObject("EmployeesViewForLOV");
    }


    /**
     * Container's getter for PoToPoLineLink1.
     * @return PoToPoLineLink1
     */
    public ViewLinkImpl getPoToPoLineLink1() {
        return (ViewLinkImpl)findViewLink("PoToPoLineLink1");
    }

    /**
     * Container's getter for PoToPoLineCountLink.
     * @return PoToPoLineCountLink
     */
    public ViewLinkImpl getPoToPoLineCountLink() {
        return (ViewLinkImpl)findViewLink("PoToPoLineCountLink");
    }
}
