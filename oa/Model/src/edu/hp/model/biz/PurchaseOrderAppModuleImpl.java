package edu.hp.model.biz;

import edu.hp.model.biz.common.PurchaseOrderAppModule;
import edu.hp.model.common.Constants;
import edu.hp.model.vo.DepartmentsViewImpl;
import edu.hp.model.vo.EmployeesViewImpl;
import edu.hp.model.vo.ItemCategoryApprovalViewImpl;
import edu.hp.model.vo.PurchaseOrderHistorysViewImpl;
import edu.hp.model.vo.PurchaseOrderLinesViewImpl;
import edu.hp.model.vo.PurchaseOrdersViewImpl;

import edu.hp.model.vo.query.po.EmpWithEmptyImpl;

import edu.hp.model.vo.query.po.PoStateWithEmptyImpl;

import java.math.BigDecimal;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 07 21:05:32 CST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PurchaseOrderAppModuleImpl extends ApplicationModuleImpl implements PurchaseOrderAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public PurchaseOrderAppModuleImpl() {
    }
    
    public void findByUserId(String submitterId) {
        PurchaseOrdersViewImpl po = this.getPurchaseOrdersView();
        po.setApplyViewCriteriaNames(null);
        
        //Do the query        
        System.err.println("In AppModule: submitterId is: " + submitterId);
        if (submitterId != null) {
            po.setsbmtId(submitterId);
            ViewCriteria sIdCriteria = po.getViewCriteria("SubmitterIdCriteria");
            po.setApplyViewCriteriaName(sIdCriteria.getName());
            po.executeQuery();            
            
            //Set the lov's value, so on page the correct user will be selected by default in the lov
            EmpWithEmptyImpl eLov = (EmpWithEmptyImpl)this.getEmpWithEmpty();
            eLov.setApplyViewCriteriaNames(null);
            eLov.setsubmiterId(submitterId);
            ViewCriteria empCriteria = eLov.getViewCriteria("findBySubmitterIdCriteria");
            eLov.setApplyViewCriteriaName(empCriteria.getName());
            eLov.executeQuery();
        }
    }

    public void findByPoId(String poId) {
        PurchaseOrdersViewImpl po = this.getPurchaseOrdersView();
        po.setApplyViewCriteriaNames(null);
        
        //Do the query        
        System.err.println("In AppModule: poId is: " + poId);
        if (poId != null) {
            po.setOrdId(poId);
            ViewCriteria poIdCriteria = po.getViewCriteria("OrderIdCriteria");
            po.setApplyViewCriteriaName(poIdCriteria.getName());
            po.executeQuery();
        }
    }

    public void newPo(String userId) {
        System.err.println("In PO AppModule. Creating new PO. SubmitterId is: " + userId);
        PurchaseOrdersViewImpl poView = this.getPurchaseOrdersView();
        Row po = poView.createRow();
        po.setAttribute("State", "1");
        po.setAttribute("SubmitterId", userId);
        poView.insertRow(po);
        poView.setCurrentRow(po);
        
//        System.err.println("Also creating a new PO Line.");
//        PurchaseOrderLinesViewImpl poLineView = this.getPurchaseOrderLinesView();
//        Row poLine = poLineView.createRow();
//        poLine.setAttribute("State", 1);
//        poLine.setAttribute("OrderId", po.getAttribute("OrderId"));
//        poLineView.insertRow(poLine);
//        poLineView.setCurrentRow(poLine);
    }
    
    public BigDecimal getApprovalLimitForCategoryId(String categoryId) {
        ItemCategoryApprovalViewImpl vo = (ItemCategoryApprovalViewImpl)this.getItemCategoryApprovalView();
        vo.setApplyViewCriteriaNames(null);
        
        if (categoryId != null) {
            vo.setCategoryId(categoryId);
            ViewCriteria vc = vo.getViewCriteria("ItemCategoryIdCriteria");
            vo.setApplyViewCriteriaName(vc.getName());
            vo.executeQuery();
            Row[] rows = vo.getAllRowsInRange();
            if (rows != null && rows.length > 0) {
                return (BigDecimal)rows[0].getAttribute("ApprovalLimit");
            }
        }
        
        return new BigDecimal(0);
    }
    
    public String getDeptSupervisorId(String submitterId) {
        EmployeesViewImpl empView = (EmployeesViewImpl)this.getEmployeesViewForLOV();
        empView.setApplyViewCriteriaNames(null);
        
        if (submitterId != null) {
            empView.setud(submitterId);
            ViewCriteria vc = empView.getViewCriteria("findByIdCriteria");
            empView.setApplyViewCriteriaName(vc.getName());
            empView.executeQuery();
            Row[] rows = empView.getAllRowsInRange();
            if (rows != null && rows.length > 0) {
                String deptId = (String)rows[0].getAttribute("DeptId");
                
                DepartmentsViewImpl dView = this.getDepartmentsView();
                dView.setApplyViewCriteriaNames(null);
                
                dView.setDpId(deptId);
                ViewCriteria dvc = dView.getViewCriteria("findByIdCriteria");
                dView.setApplyViewCriteriaName(dvc.getName());
                dView.executeQuery();
                Row[] drows = dView.getAllRowsInRange();
                if (drows != null && drows.length > 0) {
                    return (String)drows[0].getAttribute("SupervisorId");
                }
            }
        }
        
        return null;
    }
    
    public void findByState(String state, String isFinalApprover) {
        PurchaseOrdersViewImpl poView = this.getPurchaseOrdersView();        
        poView.setApplyViewCriteriaNames(null);
        
        System.err.println("In App Module: state is: " + state);
        
        if (state != null) {
            poView.setOrStateId(state);
            
            ViewCriteria vc = null;
            if (state.equals(Constants.PO_STATE_PENDING_APPROVAL) && "true".equals(isFinalApprover)) {                
                poView.setCurrApprover(Constants.ROLE_PO_2ND_APPROVER);
                vc = poView.getViewCriteria("OrderStateAndCurrApproverCriteria");
            } else if (state.equals(Constants.PO_STATE_PENDING_APPROVAL)) {
                poView.setCurrApprover(Constants.ROLE_PO_APPROVER);
                vc = poView.getViewCriteria("OrderStateAndCurrApproverCriteria");
            } else {
                vc = poView.getViewCriteria("OrderStateCriteria");
            }            
            
            poView.setApplyViewCriteriaName(vc.getName());
            poView.executeQuery();
            
            PoStateWithEmptyImpl stateView = (PoStateWithEmptyImpl)this.getPoStateWithEmpty();            
            stateView.setApplyViewCriteriaNames(null);
            stateView.setStateId(state);
            ViewCriteria stateVC = stateView.getViewCriteria("StateCriteria");
            stateView.setApplyViewCriteriaName(stateVC.getName());
            stateView.executeQuery();
        }
    }
        
    public void findForVerifier() {
        PurchaseOrdersViewImpl poView = this.getPurchaseOrdersView();        
        poView.setApplyViewCriteriaNames(null);
        
        System.err.println("In App Module: search for verifier");
        ViewCriteria verifierCriteria = poView.getViewCriteria("OrderForVerifierCriteria");
        poView.setApplyViewCriteriaName(verifierCriteria.getName());
        poView.executeQuery();
        
        ViewObjectImpl stateView = this.getPoStateWithEmpty();
        stateView.setApplyViewCriteriaNames(null);
        ViewCriteria stateVC = stateView.getViewCriteria("PoVerifierCriteria");
        stateView.setApplyViewCriteriaName(stateVC.getName());
        stateView.executeQuery();
        
    }
    
    public void findForDeptVerifier(String deptVerifierId) {
        PurchaseOrdersViewImpl poView = this.getPurchaseOrdersView();        
        poView.setApplyViewCriteriaNames(null);
        
        System.err.println("In App Module: search for dept verifier: " + deptVerifierId);
        poView.setOrStateId(Constants.PO_STATE_DEPT_REVIEW);
        poView.setDpVerifier(deptVerifierId);
        ViewCriteria vc = poView.getViewCriteria("OrderForDeptVerifierCriteria");
        poView.setApplyViewCriteriaName(vc.getName());
        poView.executeQuery();
        
        PoStateWithEmptyImpl stateView = (PoStateWithEmptyImpl)this.getPoStateWithEmpty();
        stateView.setApplyViewCriteriaNames(null);
        stateView.setStateId(Constants.PO_STATE_DEPT_REVIEW);
        ViewCriteria stateVC = stateView.getViewCriteria("StateCriteria");
        stateView.setApplyViewCriteriaName(stateVC.getName());
        stateView.executeQuery();
    }
    
    public void insertPoHistory(String orderId, String operatorId, String operationDetail) {
        PurchaseOrderHistorysViewImpl poHist = this.getPurchaseOrderHistorysView();
        Row row = poHist.createRow();
        row.setAttribute("OrderId", orderId);
        row.setAttribute("OperatorId", operatorId);
        row.setAttribute("OperationDetail", operationDetail);
        Timestamp now = new Timestamp(System.currentTimeMillis());
        row.setAttribute("OperationDate", now);
        
        poHist.insertRow(row);
    }
    
    public void createPo(String submitterId, String poNote, boolean hasFruit, double fruitPrice, Date fruitExpectDate, boolean hasDessert, double dessertPrice, Date dessertExpectDate) {
        PurchaseOrdersViewImpl poView = this.getPurchaseOrdersView();
        Row po = poView.createRow();
        po.setAttribute("SubmitterId", submitterId);
        po.setAttribute("ItemCategoryId", "水果点心");
        po.setAttribute("State", Constants.PO_STATE_PENDING_REVIEW);
        po.setAttribute("SubmitAt", Date.getCurrentDate());
        po.setAttribute("OrderNote", poNote);
        po.setAttribute("SubmitTotal", fruitPrice + dessertPrice);
        
        poView.insertRow(po);
        
        PurchaseOrderLinesViewImpl poLineView = this.getPurchaseOrderLinesView();
        if (hasFruit) {
            Row poLineFruit = poLineView.createRow();
            poLineFruit.setAttribute("OrderId", po.getAttribute("OrderId"));
            poLineFruit.setAttribute("ItemId", "水果");
            poLineFruit.setAttribute("ItemDescription", "供会议食用");
            poLineFruit.setAttribute("SubmitQuantity", new BigDecimal(1));
            poLineFruit.setAttribute("SubmitUnit", "份");
            poLineFruit.setAttribute("SubmitPrice", new BigDecimal(fruitPrice));
            poLineFruit.setAttribute("SubmitTotal", new BigDecimal(fruitPrice));
            poLineFruit.setAttribute("ExpectedDate", fruitExpectDate);
            poLineFruit.setAttribute("SubmitNote", "供会议食用");
            poLineView.insertRow(poLineFruit);
        }
        
        if (hasDessert) {
            Row poLineDessert = poLineView.createRow();
            poLineDessert.setAttribute("OrderId", po.getAttribute("OrderId"));
            poLineDessert.setAttribute("ItemId", "点心");
            poLineDessert.setAttribute("ItemDescription", "供会议食用");
            poLineDessert.setAttribute("SubmitQuantity", new BigDecimal(1));
            poLineDessert.setAttribute("SubmitUnit", "份");
            poLineDessert.setAttribute("SubmitPrice", new BigDecimal(dessertPrice));
            poLineDessert.setAttribute("SubmitTotal", new BigDecimal(dessertPrice));
            poLineDessert.setAttribute("ExpectedDate", dessertExpectDate);
            poLineDessert.setAttribute("SubmitNote", "供会议食用");
            poLineView.insertRow(poLineDessert);
        }
        
        PurchaseOrderHistorysViewImpl poHistView = this.getPurchaseOrderHistorysView();
        Row histRow = poHistView.createRow();
        histRow.setAttribute("OrderId", po.getAttribute("OrderId"));
        histRow.setAttribute("OperatorId", submitterId);
        histRow.setAttribute("OperationDetail", "提交了该订单");
        histRow.setAttribute("OperationDate", Date.getCurrentDate());        
        poHistView.insertRow(histRow);
    }
    
    

    /**
     * Container's getter for PurchaseOrdersView.
     * @return PurchaseOrdersView
     */
    public PurchaseOrdersViewImpl getPurchaseOrdersView() {
        return (PurchaseOrdersViewImpl)findViewObject("PurchaseOrdersView");
    }

    /**
     * Container's getter for ItemCategory.
     * @return ItemCategory
     */
    public ViewObjectImpl getItemCategory() {
        return (ViewObjectImpl)findViewObject("ItemCategory");
    }

    /**
     * Container's getter for PurchaseOrderLinesView.
     * @return PurchaseOrderLinesView
     */
    public PurchaseOrderLinesViewImpl getPurchaseOrderLinesView() {
        return (PurchaseOrderLinesViewImpl)findViewObject("PurchaseOrderLinesView");
    }

    /**
     * Container's getter for PoState.
     * @return PoState
     */
    public ViewObjectImpl getPoState() {
        return (ViewObjectImpl)findViewObject("PoState");
    }

    /**
     * Container's getter for PoLineCount.
     * @return PoLineCount
     */
    public ViewObjectImpl getPoLineCount() {
        return (ViewObjectImpl)findViewObject("PoLineCount");
    }

    /**
     * Container's getter for EmployeesViewForLOV.
     * @return EmployeesViewForLOV
     */
    public ViewObjectImpl getEmployeesViewForLOV() {
        return (ViewObjectImpl)findViewObject("EmployeesViewForLOV");
    }


    /**
     * Container's getter for PoToPoLineLink1.
     * @return PoToPoLineLink1
     */
    public ViewLinkImpl getPoToPoLineLink1() {
        return (ViewLinkImpl)findViewLink("PoToPoLineLink1");
    }

    /**
     * Container's getter for PoToPoLineCountLink.
     * @return PoToPoLineCountLink
     */
    public ViewLinkImpl getPoToPoLineCountLink() {
        return (ViewLinkImpl)findViewLink("PoToPoLineCountLink");
    }

    /**
     * Container's getter for ItemCategoryWithEmpty1.
     * @return ItemCategoryWithEmpty1
     */
    public ViewObjectImpl getItemCategoryWithEmpty() {
        return (ViewObjectImpl)findViewObject("ItemCategoryWithEmpty");
    }

    /**
     * Container's getter for PoStateWithEmpty1.
     * @return PoStateWithEmpty1
     */
    public ViewObjectImpl getPoStateWithEmpty() {
        return (ViewObjectImpl)findViewObject("PoStateWithEmpty");
    }

    /**
     * Container's getter for EmpWithEmpty1.
     * @return EmpWithEmpty1
     */
    public ViewObjectImpl getEmpWithEmpty() {
        return (ViewObjectImpl)findViewObject("EmpWithEmpty");
    }

    /**
     * Container's getter for ItemCategoryApprovalView1.
     * @return ItemCategoryApprovalView1
     */
    public ViewObjectImpl getItemCategoryApprovalView() {
        return (ViewObjectImpl)findViewObject("ItemCategoryApprovalView");
    }

    /**
     * Container's getter for PurchaseOrderHistorysView1.
     * @return PurchaseOrderHistorysView1
     */
    public PurchaseOrderHistorysViewImpl getPurchaseOrderHistorysView() {
        return (PurchaseOrderHistorysViewImpl)findViewObject("PurchaseOrderHistorysView");
    }

    /**
     * Container's getter for PoToPoHistoryLink1.
     * @return PoToPoHistoryLink1
     */
    public ViewLinkImpl getPoToPoHistoryLink1() {
        return (ViewLinkImpl)findViewLink("PoToPoHistoryLink1");
    }

    /**
     * Container's getter for DepartmentsView1.
     * @return DepartmentsView1
     */
    public DepartmentsViewImpl getDepartmentsView() {
        return (DepartmentsViewImpl)findViewObject("DepartmentsView");
    }
}
