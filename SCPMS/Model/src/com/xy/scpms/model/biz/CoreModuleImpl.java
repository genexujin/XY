package com.xy.scpms.model.biz;


import com.xy.scpms.model.biz.common.CoreModule;
import com.xy.scpms.model.query.CustomerViewImpl;
import com.xy.scpms.model.query.InvoiceNotificaitonViewImpl;
import com.xy.scpms.model.query.PaymentNotificationImpl;
import com.xy.scpms.model.query.search.SearchContractBaseViewImpl;
import com.xy.scpms.model.reports.ARAgingReportImpl;
import com.xy.scpms.model.reports.AuthorizerTypePerfRptImpl;
import com.xy.scpms.model.reports.CustPerfRptImpl;
import com.xy.scpms.model.reports.DynamicPaymentStatusByYearImpl;
import com.xy.scpms.model.reports.EVEReportImpl;
import com.xy.scpms.model.reports.InvoiceForecastRptImpl;
import com.xy.scpms.model.reports.InvoicedNotPaidImpl;
import com.xy.scpms.model.reports.MonthlyEffectiveRptImpl;
import com.xy.scpms.model.reports.MonthlyPaymentRptImpl;
import com.xy.scpms.model.reports.PrjMgrPerfRptImpl;
import com.xy.scpms.model.reports.RegMgrPerfRptImpl;
import com.xy.scpms.model.reports.ShipDeliveryRptImpl;
import com.xy.scpms.model.reports.UrgeSettlementRptImpl;
import com.xy.scpms.model.utils.Codes;
import com.xy.scpms.model.vo.ApprovalInProcessViewImpl;
import com.xy.scpms.model.vo.ApprovalInProcessViewRowImpl;
import com.xy.scpms.model.vo.ContractLinePaymentsViewImpl;
import com.xy.scpms.model.vo.ContractLinePaymentsViewRowImpl;
import com.xy.scpms.model.vo.ContractLineViewImpl;
import com.xy.scpms.model.vo.ContractLineViewRowImpl;
import com.xy.scpms.model.vo.ContractViewImpl;
import com.xy.scpms.model.vo.ContractViewRowImpl;
import com.xy.scpms.model.vo.CustomerContactsViewImpl;
import com.xy.scpms.model.vo.FourTechContractViewImpl;
import com.xy.scpms.model.vo.FourTechContractViewRowImpl;
import com.xy.scpms.model.vo.FourTechSeqViewImpl;
import com.xy.scpms.model.vo.FourTechSeqViewRowImpl;
import com.xy.scpms.model.vo.InvoiceRequisitionViewImpl;

import com.xy.scpms.model.vo.PaymentHistoryViewImpl;
import com.xy.scpms.model.vo.UsersViewImpl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import oracle.adf.share.ADFContext;
import oracle.adf.share.security.SecurityContext;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 30 22:14:39 CST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CoreModuleImpl extends ApplicationModuleImpl implements CoreModule {


    /**
     * This is the default constructor (do not remove).
     */
    public CoreModuleImpl() {

    }


    public void createLov(String lookupCode) {
        ViewObjectImpl view = this.getLov();
        view.executeEmptyRowSet();
        Row row = view.createRow();
        view.insertRow(row);
        row.setAttribute("LookupCode", lookupCode);
    }

    private List cloneList(List original) {
        List clonedList = new ArrayList();
        for (Object o : original) {
            clonedList.add(o);
        }
        return clonedList;
    }

    public void updateUserRole(List userRoles) {

        if (userRoles != null && userRoles.size() > 0) {
            List copyOfUserRoles = (List)this.cloneList(userRoles);
            ViewObject userRolesView = this.getUserRoles();
            RowSetIterator rsi = userRolesView.createRowSetIterator(null);
            // remove any rows for the current user that aren't in the list of product keys
            while (rsi.hasNext()) {
                Row r = rsi.next();
                String role = (String)r.getAttribute("GName");
                // if the existing row is in the list, we're ok, so remove from list.
                if (copyOfUserRoles.contains(role)) {
                    copyOfUserRoles.remove(role);
                }
                // if the existing row is in not list, remove it.
                else {
                    r.remove();

                }
            }
            rsi.closeRowSetIterator();
            // at this point, we need to add new rows for the keys that are left
            for (int i = 0; i < copyOfUserRoles.size(); i++) {
                Row newRow = userRolesView.createRow();
                userRolesView.insertRow(newRow);
                newRow.setAttribute("GName", (String)copyOfUserRoles.get(i));
            }

        } else {
            //如果角色全部删除，则在已有角色中循环并删除
            ViewObject userRolesView = this.getUserRoles();
            RowSetIterator rsi = userRolesView.createRowSetIterator(null);
            // remove any rows for the current user that aren't in the list of product keys
            while (rsi.hasNext()) {
                Row r = rsi.next();
                r.remove();

            }

        }

    }

    /**
     * 保存四技合同时，通过序列表，产生一个编号。
     */
    public void saveFourTech() {
        //get current four tech contract, which is pending for commits...
        FourTechContractViewImpl contract = getFourTechContract();
        FourTechContractViewRowImpl row = (FourTechContractViewRowImpl)contract.getCurrentRow();
        //get the contract type
        String type = row.getType();
        String code = null;
        if (type != null && !type.isEmpty()) {
            if (type.equals("开发"))
                code = "KF";
            else if (type.equals("转让"))
                code = "ZR";
            else if (type.equals("服务"))
                code = "FW";
            else if (type.equals("咨询"))
                code = "ZX";
        }

        //do a search to fetch corresponding sequence number.
        FourTechSeqViewImpl fourTechSeq = getFourTechSeq();
        fourTechSeq.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = fourTechSeq.getViewCriteria("filterByYearType");
        fourTechSeq.applyViewCriteria(criteria);
        java.util.Calendar calendar = Calendar.getInstance();
        //get current year
        int year = calendar.get(Calendar.YEAR);
        fourTechSeq.setyear(new Number(year));
        fourTechSeq.settype(code);
        //execute query
        fourTechSeq.executeQuery();
        Row[] allRowsInRange = fourTechSeq.getAllRowsInRange();
        String seqStr;

        //if has result, read last seq
        if (allRowsInRange.length != 0) {
            FourTechSeqViewRowImpl currSeq = (FourTechSeqViewRowImpl)allRowsInRange[0];

            int seq = currSeq.getSeq().intValue();
            //increase seq number
            seq++;
            //format seq to a string leading with zero
            seqStr = String.format("%04d", seq);
            //update last seq to new seq number
            currSeq.setSeq(new Number(seq));
        } else {
            //if no seq exist, then create new seq item
            FourTechSeqViewRowImpl newSeqRow = (FourTechSeqViewRowImpl)fourTechSeq.createRow();
            newSeqRow.setYear(new Number(year));
            newSeqRow.setSeq(new Number(0));
            seqStr = "0000";
            newSeqRow.setType(code);
            fourTechSeq.insertRow(newSeqRow);
        }

        String finalSeq = year + code + seqStr;
        row.setContractNo(finalSeq);

    }

    public void createFourTech(List linesId) {

        ViewObjectImpl view = getFourTechContract();
        FourTechContractViewRowImpl row = (FourTechContractViewRowImpl)view.createRow();
        Number totalAmount = new Number(0);

        if (linesId != null && linesId.size() > 0) {

            //based on input line ids, do a query to fetch all line records.
            ContractLineViewImpl line = getContractLine();
            line.setApplyViewCriteriaNames(null);
            line.executeQuery();
            StringBuffer ids = new StringBuffer("(");

            for (int i = 0; i < linesId.size(); i++) {
                Number temp = (Number)linesId.get(i);
                ids.append(temp.toString());
                ids.append(",");
            }
            ids.deleteCharAt(ids.lastIndexOf(","));
            ids.append(")");
            line.setWhereClause("ContractLine.ID in " + ids.toString());
            
            line.executeQuery();
            line.setWhereClause(null);
            line.setWhereClauseParams(null);

            //loop over result set to calculate a total price
            Row[] allRowsInRange = line.getAllRowsInRange();
            if (allRowsInRange != null && allRowsInRange.length > 0) {
                Number amount;
                for (Row rowTmp : allRowsInRange) {
                    ContractLineViewRowImpl lineRow = (ContractLineViewRowImpl)rowTmp;
                    amount = lineRow.getPrice();
                    totalAmount = totalAmount.add(amount);
                    lineRow.setFourContractBatch((Number)row.getAttribute("Id"));

                }
            }
            //            line.executeQuery();
        }
         //set the total price
        row.setAmount(totalAmount);
        view.insertRow(row);

    }

    public void findBlankFourTechLines() {
        ContractLineViewImpl view = getContractLine();
        view.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = view.getViewCriteria("fourTechIsBlank");
        view.applyViewCriteria(criteria);
        view.executeQuery();
    }

    public void findInvoicedPaymentNodes() {
        ViewObjectImpl view = getContractLinePayments();
        view.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = view.getViewCriteria("invoiced");
        view.applyViewCriteria(criteria);
        view.executeQuery();
    }

    public void findInvoicedNodes() {
        ViewObjectImpl view = getPaymentEntryView();
        view.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = view.getViewCriteria("invoiced");
        view.applyViewCriteria(criteria);
        view.executeQuery();
    }


    public void findPartialPaymentNodes() {
        ViewObjectImpl view = getPaymentEntryView();
        view.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = view.getViewCriteria("partial");
        view.applyViewCriteria(criteria);
        view.executeQuery();
    }

    public void findPaidPaymentNodes() {
        ViewObjectImpl view = getPaymentEntryView();
        view.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = view.getViewCriteria("paid");
        view.applyViewCriteria(criteria);
        view.executeQuery();
    }

    public void findPaidVarPaymentNodes() {
        ViewObjectImpl view = getPaymentEntryView();
        view.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = view.getViewCriteria("variance");
        view.applyViewCriteria(criteria);
        view.executeQuery();
    }

    public void findPendingInvReq(String dept, String userRole) {

        InvoiceRequisitionViewImpl view = this.getInvoiceRequisitionView();
        view.setApplyViewCriteriaNames(null);

        if (userRole.equals("design_director")) {
            ViewCriteria criteria = view.getViewCriteria("pendingForDept");
            view.applyViewCriteria(criteria);
            view.ensureVariableManager().setVariableValue("dept", dept);
        } else {
            ViewCriteria criteria = view.getViewCriteria("pendingForMarketing");
            view.applyViewCriteria(criteria);
        }
        view.executeQuery();
    }


    public void findPendingInvReqbyPaymentId(Number paymentId) {
        InvoiceRequisitionViewImpl view = this.getInvoiceRequisitionView();
        view.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = view.getViewCriteria("byPaymentId");
        view.applyViewCriteria(criteria);
        view.ensureVariableManager().setVariableValue("paymentId", paymentId);
        view.executeQuery();
    }

    public void findPendingInvReqbyUserName(String userName) {
        InvoiceRequisitionViewImpl view = this.getInvoiceRequisitionView();
        view.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = view.getViewCriteria("byUserName");
        view.applyViewCriteria(criteria);
        view.ensureVariableManager().setVariableValue("userName", userName);
        view.executeQuery();
    }


    public Number splitLinePayment(Number paymentId, Number firstPayAmt) {

        Number amount = new Number(0);

        ContractLinePaymentsViewImpl view = (ContractLinePaymentsViewImpl)getSplitingLinePayments();
        ContractLinePaymentsViewImpl paymentView = this.getContractLinePayments();


        Row[] rows = paymentView.findByKey(new Key(new Object[] { paymentId }), 1);

        if (rows != null && rows.length > 0) {
            ContractLinePaymentsViewRowImpl row = (ContractLinePaymentsViewRowImpl)rows[0];
            String paymentName = (String)row.getAttribute("PaymentName");
            Date paymentPlanDate = (Date)row.getAttribute("PaymentPlanDate");
            Date PaymentPlanInvoiceDate = (Date)row.getAttribute("PaymentPlanInvoiceDate");
            amount = (Number)row.getAttribute("PaymentPlanAmount");
            Number lineId = (Number)row.getAttribute("LineId");

            //mark it as deleted
            row.setAttribute("Deleted", "Y");

            int timer = 0;
            //            if (paymentName.indexOf("-") > 0) {
            //                int pos = paymentName.indexOf("-");
            //                timer = new Integer(paymentName.substring(pos+1)).intValue();
            //                paymentName = paymentName.substring(0,pos);
            //            }

            timer++;
            view.executeEmptyRowSet();

            ContractLinePaymentsViewRowImpl newRow1 = (ContractLinePaymentsViewRowImpl)view.createRow();
            newRow1.setAttribute("LineId", lineId);
            newRow1.setAttribute("PaymentName", paymentName + "-" + timer++);
            newRow1.setAttribute("PaymentPlanDate", paymentPlanDate);
            newRow1.setAttribute("PaymentPlanInvoiceDate", PaymentPlanInvoiceDate);
            newRow1.setAttribute("PaymentPlanAmount", firstPayAmt);
            newRow1.setAttribute("Status", "Spliting");

            ContractLinePaymentsViewRowImpl newRow2 = (ContractLinePaymentsViewRowImpl)view.createRow();
            newRow2.setAttribute("LineId", lineId);
            newRow2.setAttribute("PaymentName", paymentName + "-" + timer++);
            newRow2.setAttribute("PaymentPlanDate", paymentPlanDate);
            newRow2.setAttribute("PaymentPlanInvoiceDate", PaymentPlanInvoiceDate);
            newRow2.setAttribute("PaymentPlanAmount", amount.minus(firstPayAmt));
            newRow2.setAttribute("Status", "Spliting");

            view.insertRow(newRow1);
            view.insertRow(newRow2);


        }

        return amount;

    }

    public oracle.jbo.Row getContractById(Number id) {
        ContractViewImpl contract = this.getContract();
        contract.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = contract.getViewCriteria("findById");
        contract.applyViewCriteria(criteria);
        contract.setidBind(id);
        contract.executeQuery();

        oracle.jbo.Row[] rows = contract.getAllRowsInRange();
        if (rows != null && rows.length > 0) {
            return rows[0];
        }

        return null;
    }

    public oracle.jbo.Row getContractLineById(Number id) {
        ContractLineViewImpl line = this.getContractLine();
        line.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = line.getViewCriteria("findByPK");
        line.applyViewCriteria(criteria);
        line.setidvar(id);
        line.executeQuery();
        oracle.jbo.Row[] rows = line.getAllRowsInRange();
        if (rows != null && rows.length > 0) {
            return rows[0];
        }
        return null;
    }

    /**
     * 注意参数hashmap要和PaymentNodeBean.java中的applyForInvoice方法对应
     * @param payments
     */
    public void createInvoiceRequisition(HashMap payments) {

        InvoiceRequisitionViewImpl view = getDraftInvoiceRequisition();
        view.executeEmptyRowSet();

        java.util.Set<Number> keySet = payments.keySet();
        for (Number key : keySet) {
            Row invoiceReq = view.createRow();
            HashMap params = (HashMap)payments.get(key);
            invoiceReq.setAttribute("LinePaymentId", key);
            //得到当前发票申请对应的船号
            Number lineId = (Number)params.get("lineId");
            //复制船号信息
            invoiceReq.setAttribute("LineId", lineId);

            invoiceReq.setAttribute("Amount", params.get("amount"));
            invoiceReq.setAttribute("ContractId", params.get("contractId"));
            invoiceReq.setAttribute("Department", params.get("dept"));
            invoiceReq.setAttribute("Status", Codes.COL_VALUE_STATUS_DRAFT);
            view.insertRow(invoiceReq);
        }
    }

    public void quickCreateInvoiceRequisition(HashMap payments) {

        InvoiceRequisitionViewImpl view = getDraftInvoiceRequisition();
        view.executeEmptyRowSet();

        java.util.Set<Number> keySet = payments.keySet();
        for (Number key : keySet) {
            Row invoiceReq = view.createRow();
            HashMap params = (HashMap)payments.get(key);
            //得到当前发票申请对应的船号
            Number lineId = (Number)params.get("lineId");
            //复制船号信息
            invoiceReq.setAttribute("LineId", lineId);
            invoiceReq.setAttribute("LinePaymentId", key);
            invoiceReq.setAttribute("Amount", params.get("amount"));
            invoiceReq.setAttribute("ContractId", params.get("contractId"));
            invoiceReq.setAttribute("Department", params.get("dept"));
            invoiceReq.setAttribute("Status", Codes.COL_VALUE_STATUS_PENDING_APPROVAL);
            invoiceReq.setAttribute("DeptHeadOutcome", Codes.COL_VALUE_AIP_OUTCOME_PENDING);
            invoiceReq.setAttribute("MrktHeadOutcome", Codes.COL_VALUE_AIP_OUTCOME_WAITING);
            invoiceReq.setAttribute("PaymentPlanDate", params.get("payPlanDate"));
            view.insertRow(invoiceReq);
        }

    }

    /**
     * 加载dashboard前 准备数据
     * @param userRole
     * @param dept
     * @param userName
     */
    public void prepareDashboard(String userRole, String dept, String userName) {
        setAIPCriteria(userRole);
        setInoiveNotificationDay(null, null, userRole, dept, userName);
        findPendingInvReq(dept, userRole);
        setPaymentNotification(null, null, userRole, dept, userName);
        this.getMonthlyEffectiveRpt1().runReport(dept);
        this.getMonthlyPaymentRpt1().runReport(dept);
    }

    public void setPaymentNotification(Number low, Number high, String userRole, String dept, String userName) {

        ViewObjectImpl impl = this.getPaymentNotification();
        impl.setApplyViewCriteriaNames(null);
        if (userRole.equals("design_director")) {
            ViewCriteria criteria = impl.getViewCriteria("filterByDept");
            impl.applyViewCriteria(criteria);
            impl.ensureVariableManager().setVariableValue("dept", dept);
        } else if (userRole.equals("marketing_director") || userRole.equals("contractor") || userRole.equals("vip")) {
            //do nothing
        } else {
            ViewCriteria criteria = impl.getViewCriteria("filterByMgrId");
            impl.applyViewCriteria(criteria);
            impl.ensureVariableManager().setVariableValue("mgrId", userName);
        }
        if (low != null)
            getInvoiceNotificaitonView().ensureVariableManager().setVariableValue("lowDayLimit", low);

        if (high != null)
            getInvoiceNotificaitonView().ensureVariableManager().setVariableValue("highDayLimit", high);

    }

    public void setInoiveNotificationDay(Number low, Number high, String userRole, String dept, String userName) {
        //        System.out.println(userRole);
        ViewObjectImpl impl = getInvoiceNotificaitonView();
        impl.setApplyViewCriteriaNames(null);
        if (userRole.equals("design_director")) {
            ViewCriteria criteria = impl.getViewCriteria("filterByDept");
            impl.applyViewCriteria(criteria);
            impl.ensureVariableManager().setVariableValue("dept", dept);
        } else if (userRole.equals("marketing_director") || userRole.equals("contractor") || userRole.equals("vip")) {
            //do nothing
        } else {
            ViewCriteria criteria = impl.getViewCriteria("filterByMgrId");
            impl.applyViewCriteria(criteria);
            impl.ensureVariableManager().setVariableValue("mgrId", userName);
        }
        if (low != null)
            getInvoiceNotificaitonView().ensureVariableManager().setVariableValue("lowDayLimit", low);

        if (high != null)
            getInvoiceNotificaitonView().ensureVariableManager().setVariableValue("highDayLimit", high);
        impl.executeQuery();
        Row row = impl.getCurrentRow();
        this.getContract().executeEmptyRowSet();
        this.getContractLine().executeEmptyRowSet();
        this.getContractLinePayments().executeEmptyRowSet();


        //        if (row!=null){
        //            Number contractId = (Number)row.getAttribute("ContractId");
        //            Number lineId = (Number)row.getAttribute("ContractLineId");
        //            Number paymentId = (Number)row.getAttribute("PaymentId");
        //            this.getContract().setCurrentRowById(contractId);
        //            this.getContractLine().setCurrentRowById(lineId);
        //            this.getContractLinePayments().setCurrentRowById(paymentId);
        //        }

    }


    /**
     * 审核逻辑
     * @param contractId
     * @param action
     * @param userName
     */
    public void aipActionExecute(Number contractId, String action, String userName, String comments) {

        ViewObjectImpl view = getApprovalInProcess();
        view.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = view.getViewCriteria("filterByContractId");
        view.applyViewCriteria(criteria);
        view.ensureVariableManager().setVariableValue("contractId", contractId);
        view.executeQuery();

        Row[] rows = view.getAllRowsInRange();
        for (Row aip : rows) {

            //首先检查是不是等待审批的行
            if (aip.getAttribute("Outcome").equals(Codes.COL_VALUE_AIP_OUTCOME_PENDING)) {
                //如果是、则更新该行状态
                aip.setAttribute("Outcome", action);
                aip.setAttribute("Approver", userName);
                aip.setAttribute("Memo", comments);
                aip.setAttribute("ApprovalDate", new Date(new java.sql.Date(System.currentTimeMillis())));
                //判断该审批通过或未通过
                if (action.equals(Codes.COL_VALUE_AIP_OUTCOME_APPROVED)) {
                    //如果通过，检查该行审批人角色
                    if (aip.getAttribute("ApprovalRole").equals(Codes.COL_VALUE_AIP_APPROLE_MANAGER)) {
                        //如果是市场部经理则
                        //更新合同状态为审核通过，所有船号为审核中状态的更改为审核通过
                        ContractViewImpl contract = getContract();
                        contract.setApplyViewCriteriaNames(null);
                        contract.executeQuery();
                        if (aip.getAttribute("Type").equals(Codes.COL_VALUE_AIP_TYPE_TERMINATE)) {
                            contract.setContractTerminated(contractId);
                        } else if (aip.getAttribute("Type").equals(Codes.COL_VALUE_AIP_TYPE_SUSPEND)) {
                            contract.setContractSuspended(contractId);
                        } else {
                            contract.setContractApproved(contractId);
                        }
                        break;
                    } else {
                        //如果是合同管理员，则继续循环
                        continue;

                    }
                } else { //如果是审核未通过
                    //更新合同状态为未提交、所有船号为审核中的更改为未提交
                    ContractViewImpl contract = getContract();
                    contract.setApplyViewCriteriaNames(null);
                    contract.executeQuery();
                    contract.setContractRejected(contractId);
                    continue;
                }

            } else if (aip.getAttribute("Outcome").equals(Codes.COL_VALUE_AIP_OUTCOME_WAITING)) { //如果该行是等待审批，则更改起状态为审批中
                if (action.equals(Codes.COL_VALUE_AIP_OUTCOME_APPROVED)) {
                    aip.setAttribute("Outcome", Codes.COL_VALUE_AIP_OUTCOME_PENDING);
                } else {
                    aip.setAttribute("Outcome", Codes.COL_VALUE_AIP_OUTCOME_REJECTED);
                }

            }
        }

        getDBTransaction().commit();
        
    }

    /**
     * 设定当前审批任务的查询角色，参数从sessionScope中传入
     * 在MenuBean中初始化参数
     * @param userRole
     */
    public void setAIPCriteria(String userRole) {
        
        SecurityContext context = ADFContext.getCurrent().getSecurityContext();
        //        System.out.println(userRole);
        if (context.isUserInRole("contractor")) {
            userRole = "合同管理员";
        } else if (context.isUserInRole("marketing_director")) {
            userRole = "市场部主任";
        }

        ViewObjectImpl approvalInProcess = getApprovalInProcess();
        approvalInProcess.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = approvalInProcess.getViewCriteria("filterPendingByRole");
        approvalInProcess.applyViewCriteria(criteria);
        approvalInProcess.ensureVariableManager().setVariableValue("approvalRoleBind", userRole);
        approvalInProcess.executeQuery();
    }

    /**
     * 初始化一条合同记录，设置其类型为收款合同
     */
    public void createPaymentAgreement() {
        //each time discard pending transactions.
        getDBTransaction().rollback();
        ViewObjectImpl contractView = this.getContract();
        Row contract = contractView.createRow();
        contract.setAttribute("ContractType", Codes.CONTRACT_TYPE_AGREEMENT);
        contractView.insertRow(contract);
    }

    public void createNormalAgreement() {
        //each time discard pending transactions.
        getDBTransaction().rollback();
        ViewObjectImpl contractView = this.getContract();
        Row contract = contractView.createRow();
        contract.setAttribute("ContractType", Codes.CONTRACT_TYPE_NORMAL);
        contractView.insertRow(contract);
    }


    /**
     * 根据合同Id来设置当前合同
     * @param id
     */
    public void findContractById(Number id) {
        ContractViewImpl contractView = getContract();
        contractView.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = contractView.getViewCriteria("findById");
        contractView.applyViewCriteria(criteria);
        contractView.setidBind(id);
        contractView.executeQuery();
        //        //get target contract row
        //        Row[] contractRows = contractView.getAllRowsInRange();
        //        if (contractRows != null && contractRows.length > 0) {
        //            contractView.setCurrentRow(contractRows[0]);
        //        }
    }


    /**
     * 开始合同审批流程
     * @param contractId
     * @param contractNo
     * @param userName
     * @param memo
     */
    public void startApproval(Number contractId, String contractNo, String userName, String memo, String type) {

        try {
            ViewObjectImpl routingView = getApprovalInProcess();
            ContractViewImpl contractView = getContract();
            ViewObjectImpl lineView = getShipOfContract();
            lineView.setRangeSize(-1);

            //get target contract row
            contractView.setApplyViewCriteriaNames(null);
            ViewCriteria criteria = contractView.getViewCriteria("findById");
            contractView.applyViewCriteria(criteria);
            contractView.setidBind(contractId);
            contractView.executeQuery();
            Row[] contractRows = contractView.getAllRowsInRange();
            if (contractRows != null && contractRows.length > 0) {

                //set the status of contract
                ContractViewRowImpl contract = (ContractViewRowImpl)contractRows[0];

                if (!contract.getStatus().equals(Codes.COL_VALUE_STATUS_PENDING_APPROVAL)) {

                    contract.setStatus(Codes.COL_VALUE_STATUS_PENDING_APPROVAL);

                    //set the status of contract lines
                    Row[] lines = lineView.getAllRowsInRange();
                    for (Row line : lines) {
                        //如果line的状态为‘未提交’，则修改其状态为审批中
                        if (line.getAttribute("Status") != null &&
                            line.getAttribute("Status").equals(Codes.COL_VALUE_STATUS_DRAFT))
                            line.setAttribute("Status", Codes.COL_VALUE_STATUS_PENDING_APPROVAL);
                    }

                    //得到最后的 AIP的SEQ, 如果没有审批历史，则序号从1开始
                    ViewObjectImpl lastSeqView = this.getAIPLastSeq();
                    lastSeqView.ensureVariableManager().setVariableValue("idBind", contractId);
                    lastSeqView.executeQuery();
                    Row lastSeqRow = lastSeqView.first();
                    Number lastSeq = null;
                    if (lastSeqRow != null)
                        lastSeq = (Number)lastSeqRow.getAttribute("Seq");
                    else
                        lastSeq = new Number(0);

                    //because for now the rouiting is static
                    //so no need to query routing table to create WIP,
                    //hard coded here..................................................
                    ApprovalInProcessViewRowImpl firstRow = (ApprovalInProcessViewRowImpl)routingView.createRow();
                    firstRow.setApprover(userName);
                    firstRow.setApprovalRole(Codes.COL_VALUE_AIP_APPROLE_OWNER);
                    firstRow.setContractId(contractId);
                    firstRow.setContractNo(contractNo);
                    firstRow.setMemo(memo);
                    firstRow.setOutcome(Codes.COL_VALUE_AIP_OUTCOME_SUBMIT);
                    firstRow.setSeq(lastSeq.add(1));
                    firstRow.setCreator(userName);
                    //set the date
                    firstRow.setApprovalDate(new Date(new java.sql.Date(System.currentTimeMillis())));
                    firstRow.setType(type);

                    //创建合同管理员行
                    ApprovalInProcessViewRowImpl contractorRow = (ApprovalInProcessViewRowImpl)routingView.createRow();

                    contractorRow.setApprovalRole(Codes.COL_VALUE_AIP_APPROLE_CONTRACTOR);
                    contractorRow.setContractId(contractId);
                    contractorRow.setContractNo(contractNo);
                    contractorRow.setSeq(lastSeq.add(2));
                    contractorRow.setOutcome(Codes.COL_VALUE_AIP_OUTCOME_PENDING);
                    contractorRow.setCreator(userName);
                    contractorRow.setType(type);

                    //创建市场部主任审批行
                    ApprovalInProcessViewRowImpl managerRow = (ApprovalInProcessViewRowImpl)routingView.createRow();

                    managerRow.setApprovalRole(Codes.COL_VALUE_AIP_APPROLE_MANAGER);
                    managerRow.setContractId(contractId);
                    managerRow.setContractNo(contractNo);
                    managerRow.setSeq(lastSeq.add(3));
                    managerRow.setOutcome(Codes.COL_VALUE_AIP_OUTCOME_WAITING);
                    managerRow.setCreator(userName);
                    managerRow.setType(type);

                    getDBTransaction().commit();
                    //hard coding ends, all evil and dirty stops here...
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 创建复用协议
     * @param parentContractId
     */
    public void createSubContract(Number parentContractId) {
        try {
            //each time discard pending transactions.
            //getDBTransaction().rollback();
            ContractViewImpl contract = this.getContract();
            contract.setApplyViewCriteriaNames(null);
            ViewCriteria criteria = contract.getViewCriteria("findById");
            contract.applyViewCriteria(criteria);
            contract.setidBind(parentContractId);
            contract.executeQuery();

            //get target contract row
            Row[] parentRows = contract.getAllRowsInRange();
            contract.setApplyViewCriteriaNames(null);
            if (parentRows != null && parentRows.length > 0) {
                //得到主合同信息
                Row parent = parentRows[0];

                //创建一条新合同
                Row row = contract.createRow();
                String[] attrList = row.getAttributeNames();

                //复制合同头部信息
                for (String attr : attrList) {
                    if (!attr.equals("Id") && !attr.equals("ContractNo") && !attr.equals("Status") &&
                        !attr.equals("Memo") && !attr.equals("AgreementImgUrl") && !attr.equals("CreatedBy") &&
                        !attr.equals("CreatedAt") && !attr.equals("Deleted") && !attr.equals("ParentContractId") &&
                        !(attr.indexOf("View") >= 0) && !(attr.indexOf("Lookup") >= 0) &&
                        !(attr.indexOf("ContractType") >= 0) && !(attr.indexOf("TotalAmount") >= 0) &&
                        !(attr.equals("Lines")) && !(attr.indexOf("Firstname") >= 0) &&
                        !(attr.indexOf("Lastname") >= 0) && !(attr.indexOf("Username") >= 0) &&
                        !(attr.indexOf("FullName") >= 0) && !(attr.indexOf("ContractSummaryRpt") >= 0) &&
                        !(attr.indexOf("ContractStatus") >= 0) && !(attr.indexOf("LineStatus") >= 0))
                    //                        !(attr.equals("CustomerContactor")) &&
                    //                        !(attr.equals("AuthName")) &&
                    //                        !(attr.equals("CustomerId")) &&
                    //                        !(attr.equals("CustomerContactName"))
                    {
                        row.setAttribute(attr, parent.getAttribute(attr));
                    }
                }


                row.setAttribute("ParentContractId", parentContractId);
                row.setAttribute("ParentContractNo", parent.getAttribute("ContractNo"));
                row.setAttribute("ContractType", Codes.CONTRACT_TYPE_DUPLICATE);
                contract.insertRow(row);
                boolean b = contract.setCurrentRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    /**
     * Container's getter for ApprovalInProcess.
     * @return ApprovalInProcess
     */
    public ApprovalInProcessViewImpl getApprovalInProcess() {
        return (ApprovalInProcessViewImpl)findViewObject("ApprovalInProcess");
    }

    /**
     * Container's getter for ChangeHistory.
     * @return ChangeHistory
     */
    public ViewObjectImpl getChangeHistory() {
        return (ViewObjectImpl)findViewObject("ChangeHistory");
    }

    /**
     * Container's getter for Contract.
     * @return Contract
     */
    public ContractViewImpl getContract() {
        return (ContractViewImpl)findViewObject("Contract");
    }

    /**
     * Container's getter for CustomerContactsView1.
     * @return CustomerContactsView1
     */
    public ViewObjectImpl getCustomerContacts() {
        return (ViewObjectImpl)findViewObject("CustomerContacts");
    }

    /**
     * Container's getter for InvoiceBatchView1.
     * @return InvoiceBatchView1
     */
    public ViewObjectImpl getInvoiceBatches() {
        return (ViewObjectImpl)findViewObject("InvoiceBatches");
    }


    /**
     * Container's getter for LovView1.
     * @return LovView1
     */
    public ViewObjectImpl getLov() {
        return (ViewObjectImpl)findViewObject("Lov");
    }


    /**
     * Container's getter for CustomerView1.
     * @return CustomerView1
     */
    public ViewObjectImpl getCustomers() {
        return (ViewObjectImpl)findViewObject("Customers");
    }

    /**
     * Container's getter for SubContract.
     * @return SubContract
     */
    public ContractViewImpl getSubContract() {
        return (ContractViewImpl)findViewObject("SubContract");
    }

    /**
     * Container's getter for AttachmentOfContract.
     * @return AttachmentOfContract
     */
    public ViewObjectImpl getAttachmentOfContract() {
        return (ViewObjectImpl)findViewObject("AttachmentOfContract");
    }

    /**
     * Container's getter for ShipOfContract.
     * @return ShipOfContract
     */
    public ContractLineViewImpl getShipOfContract() {
        return (ContractLineViewImpl)findViewObject("ShipOfContract");
    }

    /**
     * Container's getter for ContractLinePaymentsView3.
     * @return ContractLinePaymentsView3
     */
    public ContractLinePaymentsViewImpl getLinePaymentsOfBatch() {
        return (ContractLinePaymentsViewImpl)findViewObject("LinePaymentsOfBatch");
    }

    /**
     * Container's getter for UsersView1.
     * @return UsersView1
     */
    public ViewObjectImpl getUsers() {
        return (ViewObjectImpl)findViewObject("Users");
    }


    /**
     * Container's getter for PaymentOfShip.
     * @return PaymentOfShip
     */
    public ContractLinePaymentsViewImpl getPaymentOfShip() {
        return (ContractLinePaymentsViewImpl)findViewObject("PaymentOfShip");
    }

    /**
     * Container's getter for ContractContractFk1Link1.
     * @return ContractContractFk1Link1
     */
    public ViewLinkImpl getContractContractFk1Link1() {
        return (ViewLinkImpl)findViewLink("ContractContractFk1Link1");
    }

    /**
     * Container's getter for ContractAttachmentContrFk1Link1.
     * @return ContractAttachmentContrFk1Link1
     */
    public ViewLinkImpl getContractAttachmentContrFk1Link1() {
        return (ViewLinkImpl)findViewLink("ContractAttachmentContrFk1Link1");
    }

    /**
     * Container's getter for ContractLineContractFk1Link1.
     * @return ContractLineContractFk1Link1
     */
    public ViewLinkImpl getContractLineContractFk1Link1() {
        return (ViewLinkImpl)findViewLink("ContractLineContractFk1Link1");
    }

    /**
     * Container's getter for BatchInvoiceFk1Link1.
     * @return BatchInvoiceFk1Link1
     */
    public ViewLinkImpl getBatchInvoiceFk1Link1() {
        return (ViewLinkImpl)findViewLink("BatchInvoiceFk1Link1");
    }


    /**
     * Container's getter for ContractLinePaymentsCoFk1Link2.
     * @return ContractLinePaymentsCoFk1Link2
     */
    public ViewLinkImpl getContractLinePaymentsCoFk1Link2() {
        return (ViewLinkImpl)findViewLink("ContractLinePaymentsCoFk1Link2");
    }

    /**
     * Container's getter for TotalAmtOfLineView1.
     * @return TotalAmtOfLineView1
     */
    public ViewObjectImpl getTotalAmtOfLine() {
        return (ViewObjectImpl)findViewObject("TotalAmtOfLine");
    }

    /**
     * Container's getter for TotalAmountOfContract1.
     * @return TotalAmountOfContract1
     */
    public ViewObjectImpl getTotalAmountOfContract() {
        return (ViewObjectImpl)findViewObject("TotalAmountOfContract");
    }

    /**
     * Container's getter for AIPLastSeqQuery1.
     * @return AIPLastSeqQuery1
     */
    public ViewObjectImpl getAIPLastSeq() {
        return (ViewObjectImpl)findViewObject("AIPLastSeq");
    }


    /**
     * Container's getter for SearchContractBaseView1.
     * @return SearchContractBaseView1
     */
    public ViewObjectImpl getSearchContractBaseView() {
        return (ViewObjectImpl)findViewObject("SearchContractBaseView");
    }


    /**
     * Container's getter for SearchContractBaseView1.
     * @return SearchContractBaseView1
     */
    public ViewObjectImpl getChildContracts1() {
        return (ViewObjectImpl)findViewObject("ChildContracts1");
    }

    /**
     * Container's getter for ChildContractLink1.
     * @return ChildContractLink1
     */
    public ViewLinkImpl getChildContractLink1() {
        return (ViewLinkImpl)findViewLink("ChildContractLink1");
    }


    /**
     * Container's getter for ApprovalInProcessView1.
     * @return ApprovalInProcessView1
     */
    public ApprovalInProcessViewImpl getApprovalHistory() {
        return (ApprovalInProcessViewImpl)findViewObject("ApprovalHistory");
    }

    /**
     * Container's getter for ContractToApprovalHistoryLink1.
     * @return ContractToApprovalHistoryLink1
     */
    public ViewLinkImpl getContractToApprovalHistoryLink1() {
        return (ViewLinkImpl)findViewLink("ContractToApprovalHistoryLink1");
    }

    /**
     * Container's getter for ApprovalInProcessView1.
     * @return ApprovalInProcessView1
     */
    public ApprovalInProcessViewImpl getQueryAIPByRole() {
        return (ApprovalInProcessViewImpl)findViewObject("QueryAIPByRole");
    }

    /**
     * Container's getter for InvoiceNotificaitonView1.
     * @return InvoiceNotificaitonView1
     */
    public InvoiceNotificaitonViewImpl getInvoiceNotificaitonView() {
        return (InvoiceNotificaitonViewImpl)findViewObject("InvoiceNotificaitonView");
    }


    /**
     * Container's getter for ContractLinePaymentsView1.
     * @return ContractLinePaymentsView1
     */
    public ContractLinePaymentsViewImpl getContractLinePayments() {
        return (ContractLinePaymentsViewImpl)findViewObject("ContractLinePayments");
    }

    /**
     * Container's getter for InvoiceRequisitionView1.
     * @return InvoiceRequisitionView1
     */
    public InvoiceRequisitionViewImpl getDraftInvoiceRequisition() {
        return (InvoiceRequisitionViewImpl)findViewObject("DraftInvoiceRequisition");
    }


    /**
     * Container's getter for InvoiceRequisitionView1.
     * @return InvoiceRequisitionView1
     */
    public InvoiceRequisitionViewImpl getInvoiceRequisitionView() {
        return (InvoiceRequisitionViewImpl)findViewObject("InvoiceRequisitionView");
    }


    /**
     * Container's getter for LinePaymentDetailView3.
     * @return LinePaymentDetailView3
     */
    public ViewObjectImpl getTargetPayment() {
        return (ViewObjectImpl)findViewObject("TargetPayment");
    }

    /**
     * Container's getter for InvReqPaymentLink1.
     * @return InvReqPaymentLink1
     */
    public ViewLinkImpl getInvReqPaymentLink1() {
        return (ViewLinkImpl)findViewLink("InvReqPaymentLink1");
    }

    /**
     * Container's getter for ContractLineView1.
     * @return ContractLineView1
     */
    public ContractLineViewImpl getContractLine() {
        return (ContractLineViewImpl)findViewObject("ContractLine");
    }

    /**
     * Container's getter for ContractLinePaymentsView1.
     * @return ContractLinePaymentsView1
     */
    public ContractLinePaymentsViewImpl getSplitingLinePayments() {
        return (ContractLinePaymentsViewImpl)findViewObject("SplitingLinePayments");
    }

    /**
     * Container's getter for LinePaymentDetailView1.
     * @return LinePaymentDetailView1
     */
    public ViewObjectImpl getLinePaymentDetailView() {
        return (ViewObjectImpl)findViewObject("LinePaymentDetailView");
    }

    /**
     * Container's getter for InvReqPaymentLink2.
     * @return InvReqPaymentLink2
     */
    public ViewLinkImpl getInvReqPaymentLink2() {
        return (ViewLinkImpl)findViewLink("InvReqPaymentLink2");
    }


    /**
     * Container's getter for InvoiceRequisitionView1.
     * @return InvoiceRequisitionView1
     */
    public InvoiceRequisitionViewImpl getInvReqOfBatch() {
        return (InvoiceRequisitionViewImpl)findViewObject("InvReqOfBatch");
    }

    /**
     * Container's getter for InvBatchReqLink1.
     * @return InvBatchReqLink1
     */
    public ViewLinkImpl getInvBatchReqLink1() {
        return (ViewLinkImpl)findViewLink("InvBatchReqLink1");
    }

    /**
     * Container's getter for InvoiceRequisitionView1.
     * @return InvoiceRequisitionView1
     */
    public InvoiceRequisitionViewImpl getInvReq4Batch() {
        return (InvoiceRequisitionViewImpl)findViewObject("InvReq4Batch");
    }

    /**
     * Container's getter for FourTechContractView1.
     * @return FourTechContractView1
     */
    public FourTechContractViewImpl getFourTechContract() {
        return (FourTechContractViewImpl)findViewObject("FourTechContract");
    }

    /**
     * Container's getter for FourTechContractView1.
     * @return FourTechContractView1
     */
    public FourTechContractViewImpl getFourTechContractOfLine() {
        return (FourTechContractViewImpl)findViewObject("FourTechContractOfLine");
    }

    /**
     * Container's getter for ContractLineFourTechLink1.
     * @return ContractLineFourTechLink1
     */
    public ViewLinkImpl getContractLineFourTechLink1() {
        return (ViewLinkImpl)findViewLink("ContractLineFourTechLink1");
    }

    /**
     * Container's getter for GroupsView1.
     * @return GroupsView1
     */
    public ViewObjectImpl getGroups() {
        return (ViewObjectImpl)findViewObject("Groups");
    }

    /**
     * Container's getter for GroupmembersView1.
     * @return GroupmembersView1
     */
    public ViewObjectImpl getUserRoles() {
        return (ViewObjectImpl)findViewObject("UserRoles");
    }

    /**
     * Container's getter for GroupmembersUsersFk1Link1.
     * @return GroupmembersUsersFk1Link1
     */
    public ViewLinkImpl getGroupmembersUsersFk1Link1() {
        return (ViewLinkImpl)findViewLink("GroupmembersUsersFk1Link1");
    }

    /**
     * Container's getter for ContractView1.
     * @return ContractView1
     */
    public ContractViewImpl getParentContract() {
        return (ContractViewImpl)findViewObject("ParentContract");
    }

    /**
     * Container's getter for SubToParentContract1.
     * @return SubToParentContract1
     */
    public ViewLinkImpl getSubToParentContract1() {
        return (ViewLinkImpl)findViewLink("SubToParentContract1");
    }

    /**
     * Container's getter for SearchContractBaseView1.
     * @return SearchContractBaseView1
     */
    public SearchContractBaseViewImpl getSearchParentContract() {
        return (SearchContractBaseViewImpl)findViewObject("SearchParentContract");
    }

    /**
     * Container's getter for ParentContractLink1.
     * @return ParentContractLink1
     */
    public ViewLinkImpl getParentContractLink1() {
        return (ViewLinkImpl)findViewLink("ParentContractLink1");
    }

    /**
     * Container's getter for DeptPerfTargetView1.
     * @return DeptPerfTargetView1
     */
    public ViewObjectImpl getDeptPerfTarget() {
        return (ViewObjectImpl)findViewObject("DeptPerfTarget");
    }

    /**
     * Container's getter for DynamicPaymentStatusByYear1.
     * @return DynamicPaymentStatusByYear1
     */
    public DynamicPaymentStatusByYearImpl getRpt_DynPayStatusByYear() {
        return (DynamicPaymentStatusByYearImpl)findViewObject("Rpt_DynPayStatusByYear");
    }

    /**
     * Container's getter for LovView1.
     * @return LovView1
     */
    public ViewObjectImpl getLovDepts() {
        return (ViewObjectImpl)findViewObject("LovDepts");
    }

    /**
     * Container's getter for LovView2.
     * @return LovView2
     */
    public ViewObjectImpl getLovFY() {
        return (ViewObjectImpl)findViewObject("LovFY");
    }

    /**
     * Container's getter for ARAgingReport1.
     * @return ARAgingReport1
     */
    public ARAgingReportImpl getRpt_ARAgingReport() {
        return (ARAgingReportImpl)findViewObject("Rpt_ARAgingReport");
    }

    /**
     * Container's getter for EVEReport1.
     * @return EVEReport1
     */
    public EVEReportImpl getRpt_EVEReport() {
        return (EVEReportImpl)findViewObject("Rpt_EVEReport");
    }

    /**
     * Container's getter for PaymentNotification1.
     * @return PaymentNotification1
     */
    public PaymentNotificationImpl getPaymentNotification() {
        return (PaymentNotificationImpl)findViewObject("PaymentNotification");
    }

    /**
     * Container's getter for PrjMgrPerfRpt1.
     * @return PrjMgrPerfRpt1
     */
    public PrjMgrPerfRptImpl getRpt_PrjMgrPerf() {
        return (PrjMgrPerfRptImpl)findViewObject("Rpt_PrjMgrPerf");
    }

    /**
     * Container's getter for RegMgrPerfRpt1.
     * @return RegMgrPerfRpt1
     */
    public RegMgrPerfRptImpl getRpt_RegMgrPerf() {
        return (RegMgrPerfRptImpl)findViewObject("Rpt_RegMgrPerf");
    }

    /**
     * Container's getter for CustPerfRpt1.
     * @return CustPerfRpt1
     */
    public CustPerfRptImpl getRpt_CustPerf() {
        return (CustPerfRptImpl)findViewObject("Rpt_CustPerf");
    }

    /**
     * Container's getter for PaymentView.
     * @return PaymentView
     */
    public ViewObjectImpl getPaymentView() {
        return (ViewObjectImpl)findViewObject("PaymentView");
    }

    /**
     * Container's getter for PaymentHistoryView.
     * @return PaymentHistoryView
     */
    public ViewObjectImpl getPaymentHistoryView() {
        return (ViewObjectImpl)findViewObject("PaymentHistoryView");
    }

    /**
     * Container's getter for PaymentEntryView1.
     * @return PaymentEntryView1
     */
    public ViewObjectImpl getPaymentEntryView() {
        return (ViewObjectImpl)findViewObject("PaymentEntryView");
    }

    /**
     * Container's getter for FourTechSeqView1.
     * @return FourTechSeqView1
     */
    public FourTechSeqViewImpl getFourTechSeq() {
        return (FourTechSeqViewImpl)findViewObject("FourTechSeq");
    }


    /**
     * Container's getter for ContractLineView1.
     * @return ContractLineView1
     */
    public ContractLineViewImpl getContractLines() {
        return (ContractLineViewImpl)findViewObject("ContractLines");
    }

    /**
     * Container's getter for FourtechContractLineLink1.
     * @return FourtechContractLineLink1
     */
    public ViewLinkImpl getFourtechContractLineLink1() {
        return (ViewLinkImpl)findViewLink("FourtechContractLineLink1");
    }

    /**
     * Container's getter for UserReport1.
     * @return UserReport1
     */
    public ViewObjectImpl getUserReport() {
        return (ViewObjectImpl)findViewObject("UserReport");
    }


    /**
     * Container's getter for ContractSummaryRpt3.
     * @return ContractSummaryRpt3
     */
    public ViewObjectImpl getContractSummary() {
        return (ViewObjectImpl)findViewObject("ContractSummary");
    }

    /**
     * Container's getter for ContractSummaryLink1.
     * @return ContractSummaryLink1
     */
    public ViewLinkImpl getContractSummaryLink1() {
        return (ViewLinkImpl)findViewLink("ContractSummaryLink1");
    }

    /**
     * Container's getter for ContractStatus1.
     * @return ContractStatus1
     */
    public ViewObjectImpl getContractStatus() {
        return (ViewObjectImpl)findViewObject("ContractStatus");
    }

    /**
     * Container's getter for ContractStatusLink1.
     * @return ContractStatusLink1
     */
    public ViewLinkImpl getContractStatusLink1() {
        return (ViewLinkImpl)findViewLink("ContractStatusLink1");
    }


    /**
     * Container's getter for LineStatus1.
     * @return LineStatus1
     */
    public ViewObjectImpl getLineStatus() {
        return (ViewObjectImpl)findViewObject("LineStatus");
    }

    /**
     * Container's getter for LineStatusLink1.
     * @return LineStatusLink1
     */
    public ViewLinkImpl getLineStatusLink1() {
        return (ViewLinkImpl)findViewLink("LineStatusLink1");
    }


    /**
     * Container's getter for MonthlyEffectiveRpt1.
     * @return MonthlyEffectiveRpt1
     */
    public MonthlyEffectiveRptImpl getMonthlyEffectiveRpt1() {
        return (MonthlyEffectiveRptImpl)findViewObject("MonthlyEffectiveRpt1");
    }

    /**
     * Container's getter for MonthlyPaymentRpt1.
     * @return MonthlyPaymentRpt1
     */
    public MonthlyPaymentRptImpl getMonthlyPaymentRpt1() {
        return (MonthlyPaymentRptImpl)findViewObject("MonthlyPaymentRpt1");
    }

    /**
     * Container's getter for InvoiceForecastRpt1.
     * @return InvoiceForecastRpt1
     */
    public InvoiceForecastRptImpl getInvoiceForecastRpt1() {
        return (InvoiceForecastRptImpl)findViewObject("InvoiceForecastRpt1");
    }

    /**
     * Container's getter for PaymentForecastRpt1.
     * @return PaymentForecastRpt1
     */
    public ViewObjectImpl getPaymentForecastRpt1() {
        return (ViewObjectImpl)findViewObject("PaymentForecastRpt1");
    }

    /**
     * Container's getter for ShipDeliveryRpt1.
     * @return ShipDeliveryRpt1
     */
    public ShipDeliveryRptImpl getShipDeliveryRpt1() {
        return (ShipDeliveryRptImpl)findViewObject("ShipDeliveryRpt1");
    }

    /**
     * Container's getter for UrgeSettlementRpt1.
     * @return UrgeSettlementRpt1
     */
    public UrgeSettlementRptImpl getUrgeSettlementRpt1() {
        return (UrgeSettlementRptImpl)findViewObject("UrgeSettlementRpt1");
    }

    /**
     * Container's getter for InvoicedNotPaid1.
     * @return InvoicedNotPaid1
     */
    public InvoicedNotPaidImpl getInvoicedNotPaid1() {
        return (InvoicedNotPaidImpl)findViewObject("InvoicedNotPaid1");
    }

    /**
     * Container's getter for AuthorizerTypePerfRpt1.
     * @return AuthorizerTypePerfRpt1
     */
    public AuthorizerTypePerfRptImpl getAuthorizerTypePerfRpt1() {
        return (AuthorizerTypePerfRptImpl)findViewObject("AuthorizerTypePerfRpt1");
    }
}
