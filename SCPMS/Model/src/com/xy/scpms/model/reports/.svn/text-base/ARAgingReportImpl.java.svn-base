package com.xy.scpms.model.reports;

import com.xy.scpms.model.common.NoAutoQueryView;
import com.xy.scpms.model.reports.common.ARAgingReport;

import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 01 20:31:27 CST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ARAgingReportImpl extends NoAutoQueryView implements ARAgingReport {

   

    /**
     * This is the default constructor (do not remove).
     */
    public ARAgingReportImpl() {
    }

  

    public void runReportCriteria(Number month, Number year) {
        this.setyear(year);
        this.setmonth(month);
        this.executeQuery();
        //reorderRowSet();
    }

    public void reorderRowSet() {

        try {
            this.setRangeSize(-1);
            RowSet rowSet = this.getRowSet();
            int count = rowSet.getRowCount();

            Number intactTotal = new Number(0);
            Number arTotal = new Number(0);
            Number frozenTotal = new Number(0);
            Number inv1095Total = new Number(0);
            Number inv180Total = new Number(0);
            Number inv365Total = new Number(0);
            Number inv730Total = new Number(0);
            Number inv90Total = new Number(0);
            Number invTotal = new Number(0);
            Number payTotal = new Number(0);
            ARAgingReportRowImpl sdari = new ARAgingReportRowImpl();


            for (int i = 0; i < count; i++) {
                ARAgingReportRowImpl row =
                    (ARAgingReportRowImpl)rowSet.getRowAtRangeIndex(i);

                if (row.getDesignDept().equals("南通SDARI")) {

                    sdari.setIntactTotal(row.getIntactTotal());
                    sdari.setArTotal(row.getArTotal());
                    sdari.setFrozenTotal(row.getFrozenTotal());
                    sdari.setInv1095(row.getInv1095());
                    sdari.setInv180(row.getInv180());
                    sdari.setInv365(row.getInv365());
                    sdari.setInv730(row.getInv730());
                    sdari.setInv90(row.getInv90());
                    sdari.setInvTotal(row.getInvTotal());
                    sdari.setPayTotal(row.getPayTotal());
                    sdari.setDesignDept(row.getDesignDept());
                    row.removeFromCollection();
                } else {
                    if (row.getIntactTotal() != null)
                        intactTotal = intactTotal.add(row.getIntactTotal());
                    if (row.getArTotal() != null)
                        arTotal = arTotal.add(row.getArTotal());
                    if (row.getFrozenTotal() != null)
                        frozenTotal = frozenTotal.add(row.getFrozenTotal());
                    if (row.getInv1095() != null)
                        inv1095Total = inv1095Total.add(row.getInv1095());
                    if (row.getInv180() != null)
                        inv180Total = inv180Total.add(row.getInv180());
                    if (row.getInv365() != null)
                        inv365Total = inv365Total.add(row.getInv365());
                    if (row.getInv730() != null)
                        inv730Total = inv730Total.add(row.getInv730());
                    if (row.getInv90() != null)
                        inv90Total = inv90Total.add(row.getInv90());
                    if (row.getInvTotal() != null)
                        invTotal = invTotal.add(row.getInvTotal());
                    if (row.getPayTotal() != null)
                        payTotal = payTotal.add(row.getPayTotal());

                }
            }

            count = rowSet.getRowCount();
            ARAgingReportRowImpl totalRow = new ARAgingReportRowImpl();

            totalRow.setIntactTotal(intactTotal);
            totalRow.setArTotal(arTotal);
            totalRow.setFrozenTotal(frozenTotal);
            totalRow.setInv1095(inv1095Total);
            totalRow.setInv180(inv180Total);
            totalRow.setInv365(inv365Total);
            totalRow.setInv730(inv730Total);
            totalRow.setInv90(inv90Total);
            totalRow.setInvTotal(invTotal);
            totalRow.setPayTotal(payTotal);
            totalRow.setDesignDept("全院合计");

            this.insertRowAtRangeIndex(++count, totalRow);

            this.insertRowAtRangeIndex(++count, sdari);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * Returns the bind variable value for month.
     * @return bind variable value for month
     */
    public Number getmonth() {
        return (Number)getNamedWhereClauseParam("month");
    }

    /**
     * Sets <code>value</code> for bind variable month.
     * @param value value to bind as month
     */
    public void setmonth(Number value) {
        setNamedWhereClauseParam("month", value);
    }

    /**
     * Returns the bind variable value for year.
     * @return bind variable value for year
     */
    public Number getyear() {
        return (Number)getNamedWhereClauseParam("year");
    }

    /**
     * Sets <code>value</code> for bind variable year.
     * @param value value to bind as year
     */
    public void setyear(Number value) {
        setNamedWhereClauseParam("year", value);
    }
}
