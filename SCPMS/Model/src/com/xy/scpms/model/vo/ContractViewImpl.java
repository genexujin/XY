package com.xy.scpms.model.vo;


import com.xy.scpms.model.utils.Codes;
import com.xy.scpms.model.vo.common.ContractView;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 01 13:11:24 CST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContractViewImpl extends ViewObjectImpl implements ContractView {
    /**
     * This is the default constructor (do not remove).
     */
    public ContractViewImpl() {
    }

    /**
     * 如果合同主体的委托方改变，相应改变关联船号的相对应信息
     */
    public void changeCustomer() {
        ContractViewRowImpl row = (ContractViewRowImpl)this.getCurrentRow();
        if (row != null) {
            String authType = row.getAuthType();
            String customerName = row.getAuthName();
            if (customerName != null) {
                String customerAttrField = "";
                if (authType != null && authType.length() > 0) {

                    if (authType.equals(Codes.AUTH_TYPE_PLANT))
                        customerAttrField = "ShipPlant";
                    else if (authType.equals(Codes.AUTH_TYPE_OWNER))
                        customerAttrField = "ShipOwner";
                    else if (authType.equals(Codes.AUTH_TYPE_BROKER))
                        customerAttrField = "ShipBroker";
                }
                RowIterator iterator = row.getLines();
                iterator.setRangeSize(-1);
                Row[] allRowsInRange = iterator.getAllRowsInRange();
                if (allRowsInRange != null & allRowsInRange.length > 0) {
                    
                    for (Row line : allRowsInRange) {
                        if (!customerAttrField.equals(""))
                            line.setAttribute(customerAttrField, customerName);
                    }
                }
            }

        }

    }

    public void setCurrentRowCustomerId(String id) {
        Row row = this.getCurrentRow();
        row.setAttribute("CustomerId", id);
    }

    public void setContactNull() {
        ContractViewRowImpl row = (ContractViewRowImpl)this.getCurrentRow();
        row.setCustomerContactor(null);
        row.setCustomerContactName(null);
    }

    public void refreshCustomerContactVA(String id) {
        System.err.println("start to refresh contacts va..");
        ContractViewRowImpl row = (ContractViewRowImpl)this.getCurrentRow();
        row.setAttribute("CustomerId", id);
        //        System.err.println("set customerid value...");
        CustomerContactsViewImpl contactView = (CustomerContactsViewImpl)row.getCustomerContacts().getViewObject();
        contactView.setcustIdBind(id);
        contactView.executeQuery();
        //        System.err.println("contact view reexecuted!");

    }

    public void setCurrentRowById(Number id) {
       findById(id);

    }
    
    public void findById(Number id){
        this.setApplyViewCriteriaNames(null);
        ViewCriteria criteria = this.getViewCriteria("findById");
        this.applyViewCriteria(criteria);
        this.setidBind(id);
        this.executeQuery();        
    }

    public void setContractTerminated(Number id) {
        //根据id查询合同
        Row[] rows = findByKey(new Key(new Object[] { id }), 1);
        if (rows != null && rows.length > 0) {
            ContractViewRowImpl contract = (ContractViewRowImpl)rows[0];
            //更新合同状态为合同终止
            contract.setStatus(Codes.COL_VALUE_STATUS_TERMINATED);
            //得到该合同的所有行
            RowIterator iterator = contract.getLines();

            while (iterator.hasNext()) {
                ContractLineViewRowImpl line = (ContractLineViewRowImpl)iterator.next();
                //如果该行的状态为审核中，则变更状态为合同终止
                if (line.getStatus().equals(Codes.COL_VALUE_STATUS_PENDING_APPROVAL)) {
                    line.setStatus(Codes.COL_VALUE_STATUS_TERMINATED);
                }
            }
        }
    }

    public void setContractSuspended(Number id) {
        //根据id查询合同
        Row[] rows = findByKey(new Key(new Object[] { id }), 1);
        if (rows != null && rows.length > 0) {
            ContractViewRowImpl contract = (ContractViewRowImpl)rows[0];
            //更新合同状态为合同暂停
            contract.setStatus(Codes.COL_VALUE_STATUS_SUSPENDED);
            //得到该合同的所有行
            RowIterator iterator = contract.getLines();

            while (iterator.hasNext()) {
                ContractLineViewRowImpl line = (ContractLineViewRowImpl)iterator.next();
                //如果该行的状态为审核中，则变更状态为合同暂停
                if (line.getStatus().equals(Codes.COL_VALUE_STATUS_PENDING_APPROVAL)) {
                    line.setStatus(Codes.COL_VALUE_STATUS_SUSPENDED);
                }
            }
        }
    }

    /**
     * 将合同状态置为审核通过，船号状态也相应变化
     * @param id
     */
    public void setContractApproved(Number id) {

        //根据id查询合同
        Row[] rows = findByKey(new Key(new Object[] { id }), 1);
        if (rows != null && rows.length > 0) {
            ContractViewRowImpl contract = (ContractViewRowImpl)rows[0];
            //更新合同状态为已审核
            contract.setStatus(Codes.COL_VALUE_STATUS_APPROVED);
            //得到该合同的所有行
            RowIterator iterator = contract.getLines();

            while (iterator.hasNext()) {
                ContractLineViewRowImpl line = (ContractLineViewRowImpl)iterator.next();
                //如果该行的状态为审核中，则变更状态为审核通过
                if (line.getStatus().equals(Codes.COL_VALUE_STATUS_PENDING_APPROVAL)) {
                    line.setStatus(Codes.COL_VALUE_STATUS_APPROVED);
                } else if (line.getStatus().equals(Codes.COL_VALUE_STATUS_PENDING_ABANDONED)) {
                    //如果该行状态为申请弃船，则变更其状态为已弃船
                    line.setStatus(Codes.COL_VALUE_STATUS_ABANDONED);
                }
            }
        }

    }

    /**
     * 将合同状态置为未提交，船号状态也相应变化
     * @param id
     */
    public void setContractRejected(Number id) {
        //根据id查询合同
        Row[] rows = findByKey(new Key(new Object[] { id }), 1);
        if (rows != null && rows.length > 0) {
            System.out.println("here!");
            ContractViewRowImpl contract = (ContractViewRowImpl)rows[0];
            //更新合同状态为未提交
            contract.setStatus(Codes.COL_VALUE_STATUS_DRAFT);
            //得到该合同的所有行
            RowIterator iterator = contract.getLines();

            while (iterator.hasNext()) {
                ContractLineViewRowImpl line = (ContractLineViewRowImpl)iterator.next();
                //如果该行的状态为审核中，则变更状态为未提交
                if (line.getStatus().equals(Codes.COL_VALUE_STATUS_PENDING_APPROVAL)) {
                    line.setStatus(Codes.COL_VALUE_STATUS_DRAFT);
                } else if (line.getStatus().equals(Codes.COL_VALUE_STATUS_PENDING_ABANDONED)) {
                    //如果该行状态为申请弃船，则变更其状态为未提交
                    line.setStatus(Codes.COL_VALUE_STATUS_DRAFT);
                }
            }
        }
    }

    public void sumTotal() {
        ContractViewRowImpl row = (ContractViewRowImpl)getCurrentRow();
        RowIterator iterator = row.getLines();
        Number total = new Number(0);
        while (iterator.hasNext()) {

            ContractLineViewRowImpl line = (ContractLineViewRowImpl)iterator.next();
            if (!line.getStatus().equals(Codes.COL_VALUE_STATUS_ABANDONED)) {
                RowIterator paymentsIterator = line.getPayments();
                Number price = new Number(0);
                while (paymentsIterator.hasNext()) {
                    ContractLinePaymentsViewRowImpl payment = (ContractLinePaymentsViewRowImpl)paymentsIterator.next();
                    price = price.add(payment.getPaymentPlanAmount());
                }
                line.setPrice(price);
                total = total.add(price);
            }
        }

        row.setTotalAmount(total);
    }

    /**
     * Returns the variable value for idBind.
     * @return variable value for idBind
     */
    public Number getidBind() {
        return (Number)ensureVariableManager().getVariableValue("idBind");
    }

    /**
     * Sets <code>value</code> for variable idBind.
     * @param value value to bind as idBind
     */
    public void setidBind(Number value) {
        ensureVariableManager().setVariableValue("idBind", value);
    }

    /**
     * Returns the variable value for pmBind.
     * @return variable value for pmBind
     */
    public String getpmBind() {
        return (String)ensureVariableManager().getVariableValue("pmBind");
    }

    /**
     * Sets <code>value</code> for variable pmBind.
     * @param value value to bind as pmBind
     */
    public void setpmBind(String value) {
        ensureVariableManager().setVariableValue("pmBind", value);
    }

    /**
     * Returns the variable value for userBind.
     * @return variable value for userBind
     */
    public String getuserBind() {
        return (String)ensureVariableManager().getVariableValue("userBind");
    }

    /**
     * Sets <code>value</code> for variable userBind.
     * @param value value to bind as userBind
     */
    public void setuserBind(String value) {
        ensureVariableManager().setVariableValue("userBind", value);
    }
}
