package com.xy.scpms.model.vo;

import com.xy.scpms.model.common.BaseEntity;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 05 19:09:49 CST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FourTechSeqViewRowImpl extends ViewRowImpl {
    public static final int ENTITY_FOURTECHSEQ = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(FourTechSeqViewRowImpl obj) {
                return obj.getId();
            }

            public void put(FourTechSeqViewRowImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        Year {
            public Object get(FourTechSeqViewRowImpl obj) {
                return obj.getYear();
            }

            public void put(FourTechSeqViewRowImpl obj, Object value) {
                obj.setYear((Number)value);
            }
        }
        ,
        Type {
            public Object get(FourTechSeqViewRowImpl obj) {
                return obj.getType();
            }

            public void put(FourTechSeqViewRowImpl obj, Object value) {
                obj.setType((String)value);
            }
        }
        ,
        Seq {
            public Object get(FourTechSeqViewRowImpl obj) {
                return obj.getSeq();
            }

            public void put(FourTechSeqViewRowImpl obj, Object value) {
                obj.setSeq((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(FourTechSeqViewRowImpl object);

        public abstract void put(FourTechSeqViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int YEAR = AttributesEnum.Year.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int SEQ = AttributesEnum.Seq.index();

    /**
     * This is the default constructor (do not remove).
     */
    public FourTechSeqViewRowImpl() {
    }

    /**
     * Gets FourTechSeq entity object.
     * @return the FourTechSeq
     */
    public BaseEntity getFourTechSeq() {
        return (BaseEntity)getEntity(ENTITY_FOURTECHSEQ);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public Number getId() {
        return (Number) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for YEAR using the alias name Year.
     * @return the YEAR
     */
    public Number getYear() {
        return (Number) getAttributeInternal(YEAR);
    }

    /**
     * Sets <code>value</code> as attribute value for YEAR using the alias name Year.
     * @param value value to set the YEAR
     */
    public void setYear(Number value) {
        setAttributeInternal(YEAR, value);
    }

    /**
     * Gets the attribute value for TYPE using the alias name Type.
     * @return the TYPE
     */
    public String getType() {
        return (String) getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TYPE using the alias name Type.
     * @param value value to set the TYPE
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * Gets the attribute value for SEQ using the alias name Seq.
     * @return the SEQ
     */
    public Number getSeq() {
        return (Number) getAttributeInternal(SEQ);
    }

    /**
     * Sets <code>value</code> as attribute value for SEQ using the alias name Seq.
     * @param value value to set the SEQ
     */
    public void setSeq(Number value) {
        setAttributeInternal(SEQ, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
