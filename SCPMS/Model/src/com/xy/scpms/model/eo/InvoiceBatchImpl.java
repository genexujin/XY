package com.xy.scpms.model.eo;


import com.xy.scpms.model.common.BaseEntity;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 12 21:03:42 CST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InvoiceBatchImpl extends BaseEntity {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getId();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        BatchName {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getBatchName();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setBatchName((String)value);
            }
        }
        ,
        InvNum {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getInvNum();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setInvNum((Number)value);
            }
        }
        ,
        Status {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getStatus();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreationDate {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getCreationDate();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Memo {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getMemo();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setMemo((String)value);
            }
        }
        ,
        Deleted {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getDeleted();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setDeleted((String)value);
            }
        }
        ,
        ContractLinePayments {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getContractLinePayments();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        InvoiceRequisition {
            public Object get(InvoiceBatchImpl obj) {
                return obj.getInvoiceRequisition();
            }

            public void put(InvoiceBatchImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(InvoiceBatchImpl object);

        public abstract void put(InvoiceBatchImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int BATCHNAME = AttributesEnum.BatchName.index();
    public static final int INVNUM = AttributesEnum.InvNum.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int MEMO = AttributesEnum.Memo.index();
    public static final int DELETED = AttributesEnum.Deleted.index();
    public static final int CONTRACTLINEPAYMENTS = AttributesEnum.ContractLinePayments.index();
    public static final int INVOICEREQUISITION = AttributesEnum.InvoiceRequisition.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InvoiceBatchImpl() {
    }
    
    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        
        RowIterator contractLinePayments = this.getContractLinePayments();
        while(contractLinePayments.hasNext()){
            Row row = contractLinePayments.next();
            row.setAttribute("InvoiceBatchId", null);
        }

        RowIterator invoiceRequisition = this.getInvoiceRequisition();
        while(invoiceRequisition.hasNext()){
            Row row = invoiceRequisition.next();
            row.setAttribute("BatchId", null);
        }
        
        super.remove();
       
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for BatchName, using the alias name BatchName.
     * @return the value of BatchName
     */
    public String getBatchName() {
        return (String)getAttributeInternal(BATCHNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for BatchName.
     * @param value value to set the BatchName
     */
    public void setBatchName(String value) {
        setAttributeInternal(BATCHNAME, value);
    }

    /**
     * Gets the attribute value for InvNum, using the alias name InvNum.
     * @return the value of InvNum
     */
    public Number getInvNum() {
        return (Number)getAttributeInternal(INVNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvNum.
     * @param value value to set the InvNum
     */
    public void setInvNum(Number value) {
        setAttributeInternal(INVNUM, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the value of Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for Memo, using the alias name Memo.
     * @return the value of Memo
     */
    public String getMemo() {
        return (String)getAttributeInternal(MEMO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Memo.
     * @param value value to set the Memo
     */
    public void setMemo(String value) {
        setAttributeInternal(MEMO, value);
    }

    /**
     * Gets the attribute value for Deleted, using the alias name Deleted.
     * @return the value of Deleted
     */
    public String getDeleted() {
        return (String)getAttributeInternal(DELETED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Deleted.
     * @param value value to set the Deleted
     */
    public void setDeleted(String value) {
        setAttributeInternal(DELETED, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getContractLinePayments() {
        return (RowIterator)getAttributeInternal(CONTRACTLINEPAYMENTS);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getInvoiceRequisition() {
        return (RowIterator)getAttributeInternal(INVOICEREQUISITION);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.xy.scpms.model.eo.InvoiceBatch");
    }


}
