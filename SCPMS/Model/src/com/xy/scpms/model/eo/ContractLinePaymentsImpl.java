package com.xy.scpms.model.eo;


import com.xy.scpms.model.common.BaseEntity;
import com.xy.scpms.model.utils.Codes;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 31 10:36:20 CST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContractLinePaymentsImpl extends BaseEntity {

    public boolean testPaymentVariance() {
        boolean result = true;
        Number totalPayment = this.getTotalPayment();
        Number plannedAmount = this.getPaymentPlanAmount();
        String var = getVariance();
        String type = this.getStatus();
        if (totalPayment != null && !(totalPayment.equals(plannedAmount)) && !type.equals("部分收款") &&
            (var == null || var.length() <= 0)) {
            result = false;
        }
        return result;
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        
        if (operation == DML_UPDATE) {


            String invNum = getInvoiceNumber();
            String status = getStatus();

            //检查是否该行已经状态变为已付款
            if (status.equals(Codes.COL_VALUE_PAYMENT_STATUS_PAID) ||
                status.equals(Codes.COL_VALUE_PAYMENT_STATUS_PAID_VAR)) {

                ContractLineImpl line = getContractLine();
                
//                String mnftNo = line.getShipMnftNo();
//                System.err.println("mnftNo: "+ mnftNo);
                //如果是遍历其船号所在的所有收款节点
                RowSet rowSet = line.getContractLinePaymentsVA();
                
//                System.err.println(rowSet.getRangeSize());
                

                boolean allPaid = true;
                while (rowSet.hasNext()) {
                    Row row = rowSet.next();
                    String st = (String)row.getAttribute("Status");
//                    System.err.println(st);
                    if (!(st.equals(Codes.COL_VALUE_PAYMENT_STATUS_PAID) ||
                          st.equals(Codes.COL_VALUE_PAYMENT_STATUS_PAID_VAR))) {
                        allPaid = false;
                        break; //如果有一收款节点为未付款则停止Loop
                    }
                }
//                System.err.println("all payment nodes paid status is : "+allPaid);
                if (allPaid) {

                    boolean isContractAllPaid = true;
                    //如果全部付款，则更新船号状态为收款完成。
                    line.setStatus(Codes.COL_VALUE_STATUS_PAID);
                    //继续遍历所在合同的所有船号是否完成收款
                    ContractImpl contract = line.getContract();
                    RowIterator lines = contract.getContractLine();
                    lines.setCurrentRowAtRangeIndex(0);
                    while (lines.hasNext()) {
                        Row row = lines.next();
                        if (!(((String)row.getAttribute("Status")).equals(Codes.COL_VALUE_STATUS_PAID))) {
                            isContractAllPaid = false;
                            break; //如果有一条船号未完成收款则停止loop
                        }
                    }
                    if (isContractAllPaid) { //如果全部收款则更新该合同为完成收款
                        contract.setStatus(Codes.COL_VALUE_STATUS_PAID);
//                        System.err.println("all ship paid!");
                    }
                }

            }

            //检查如果发票不为空，且状态为审核通过，则更新状态为已开票
            if (invNum != null && invNum.length() > 0 && status.equals(Codes.COL_VALUE_PAYMENT_STATUS_APPROVED)) {
                setStatus(Codes.COL_VALUE_PAYMENT_STATUS_INVOICED);
            }
        }

        super.doDML(operation, e);
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        setAttribute("Status", Codes.COL_VALUE_PAYMENT_STATUS_INITIAL);

    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getId();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setId((Number)value);
            }
        },
        LineId {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getLineId();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setLineId((Number)value);
            }
        },
        PaymentName {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getPaymentName();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setPaymentName((String)value);
            }
        },
        PaymentPlanDate {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getPaymentPlanDate();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setPaymentPlanDate((Date)value);
            }
        },
        PaymentPlanAmount {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getPaymentPlanAmount();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setPaymentPlanAmount((Number)value);
            }
        },
        Deleted {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getDeleted();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setDeleted((String)value);
            }
        },
        CreatedBy {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CreatedAt {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getCreatedAt();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        PaymentPlanInvoiceDate {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getPaymentPlanInvoiceDate();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setPaymentPlanInvoiceDate((Date)value);
            }
        },
        Status {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getStatus();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        },
        InvoiceDate {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getInvoiceDate();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setInvoiceDate((Date)value);
            }
        },
        InvoiceAmount {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getInvoiceAmount();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setInvoiceAmount((Number)value);
            }
        },
        TotalPayment {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getTotalPayment();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setTotalPayment((Number)value);
            }
        },
        Variance {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getVariance();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setVariance((String)value);
            }
        },
        Memo {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getMemo();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setMemo((String)value);
            }
        },
        InvoiceNumber {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getInvoiceNumber();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setInvoiceNumber((String)value);
            }
        },
        InvoiceBatchId {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getInvoiceBatchId();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setInvoiceBatchId((Number)value);
            }
        },
        PaymentDate {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getPaymentDate();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setPaymentDate((Date)value);
            }
        },
        Ems {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getEms();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setEms((String)value);
            }
        },
        ContractLine {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getContractLine();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setContractLine((ContractLineImpl)value);
            }
        },
        InvoiceBatch {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getInvoiceBatch();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setInvoiceBatch((InvoiceBatchImpl)value);
            }
        },
        Payment {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getPayment();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        InvoiceRequisition {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getInvoiceRequisition();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        TotalAmtOfLine {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getTotalAmtOfLine();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        MasterLine {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getMasterLine();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ChangeHistoryView {
            public Object get(ContractLinePaymentsImpl obj) {
                return obj.getChangeHistoryView();
            }

            public void put(ContractLinePaymentsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ContractLinePaymentsImpl object);

        public abstract void put(ContractLinePaymentsImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int LINEID = AttributesEnum.LineId.index();
    public static final int PAYMENTNAME = AttributesEnum.PaymentName.index();
    public static final int PAYMENTPLANDATE = AttributesEnum.PaymentPlanDate.index();
    public static final int PAYMENTPLANAMOUNT = AttributesEnum.PaymentPlanAmount.index();
    public static final int DELETED = AttributesEnum.Deleted.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDAT = AttributesEnum.CreatedAt.index();
    public static final int PAYMENTPLANINVOICEDATE = AttributesEnum.PaymentPlanInvoiceDate.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int INVOICEDATE = AttributesEnum.InvoiceDate.index();
    public static final int INVOICEAMOUNT = AttributesEnum.InvoiceAmount.index();
    public static final int TOTALPAYMENT = AttributesEnum.TotalPayment.index();
    public static final int VARIANCE = AttributesEnum.Variance.index();
    public static final int MEMO = AttributesEnum.Memo.index();
    public static final int INVOICENUMBER = AttributesEnum.InvoiceNumber.index();
    public static final int INVOICEBATCHID = AttributesEnum.InvoiceBatchId.index();
    public static final int PAYMENTDATE = AttributesEnum.PaymentDate.index();
    public static final int EMS = AttributesEnum.Ems.index();
    public static final int CONTRACTLINE = AttributesEnum.ContractLine.index();
    public static final int INVOICEBATCH = AttributesEnum.InvoiceBatch.index();
    public static final int PAYMENT = AttributesEnum.Payment.index();
    public static final int INVOICEREQUISITION = AttributesEnum.InvoiceRequisition.index();
    public static final int TOTALAMTOFLINE = AttributesEnum.TotalAmtOfLine.index();
    public static final int MASTERLINE = AttributesEnum.MasterLine.index();
    public static final int CHANGEHISTORYVIEW = AttributesEnum.ChangeHistoryView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ContractLinePaymentsImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.xy.scpms.model.eo.ContractLinePayments");
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for LineId, using the alias name LineId.
     * @return the LineId
     */
    public Number getLineId() {
        return (Number)getAttributeInternal(LINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LineId.
     * @param value value to set the LineId
     */
    public void setLineId(Number value) {
        setAttributeInternal(LINEID, value);
    }

    /**
     * Gets the attribute value for PaymentName, using the alias name PaymentName.
     * @return the PaymentName
     */
    public String getPaymentName() {
        return (String)getAttributeInternal(PAYMENTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymentName.
     * @param value value to set the PaymentName
     */
    public void setPaymentName(String value) {
        setAttributeInternal(PAYMENTNAME, value);
    }

    /**
     * Gets the attribute value for PaymentPlanDate, using the alias name PaymentPlanDate.
     * @return the PaymentPlanDate
     */
    public Date getPaymentPlanDate() {
        return (Date)getAttributeInternal(PAYMENTPLANDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymentPlanDate.
     * @param value value to set the PaymentPlanDate
     */
    public void setPaymentPlanDate(Date value) {
        setAttributeInternal(PAYMENTPLANDATE, value);
    }

    /**
     * Gets the attribute value for PaymentPlanAmount, using the alias name PaymentPlanAmount.
     * @return the PaymentPlanAmount
     */
    public Number getPaymentPlanAmount() {
        return (Number)getAttributeInternal(PAYMENTPLANAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymentPlanAmount.
     * @param value value to set the PaymentPlanAmount
     */
    public void setPaymentPlanAmount(Number value) {
        setAttributeInternal(PAYMENTPLANAMOUNT, value);
    }

    /**
     * Gets the attribute value for Deleted, using the alias name Deleted.
     * @return the Deleted
     */
    public String getDeleted() {
        return (String)getAttributeInternal(DELETED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Deleted.
     * @param value value to set the Deleted
     */
    public void setDeleted(String value) {
        setAttributeInternal(DELETED, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for CreatedAt, using the alias name CreatedAt.
     * @return the CreatedAt
     */
    public Date getCreatedAt() {
        return (Date)getAttributeInternal(CREATEDAT);
    }

    /**
     * Gets the attribute value for PaymentPlanInvoiceDate, using the alias name PaymentPlanInvoiceDate.
     * @return the PaymentPlanInvoiceDate
     */
    public Date getPaymentPlanInvoiceDate() {
        return (Date)getAttributeInternal(PAYMENTPLANINVOICEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymentPlanInvoiceDate.
     * @param value value to set the PaymentPlanInvoiceDate
     */
    public void setPaymentPlanInvoiceDate(Date value) {
        setAttributeInternal(PAYMENTPLANINVOICEDATE, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for InvoiceDate, using the alias name InvoiceDate.
     * @return the InvoiceDate
     */
    public Date getInvoiceDate() {
        return (Date)getAttributeInternal(INVOICEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvoiceDate.
     * @param value value to set the InvoiceDate
     */
    public void setInvoiceDate(Date value) {
        setAttributeInternal(INVOICEDATE, value);
    }

    /**
     * Gets the attribute value for InvoiceAmount, using the alias name InvoiceAmount.
     * @return the InvoiceAmount
     */
    public Number getInvoiceAmount() {
        return (Number)getAttributeInternal(INVOICEAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvoiceAmount.
     * @param value value to set the InvoiceAmount
     */
    public void setInvoiceAmount(Number value) {
        setAttributeInternal(INVOICEAMOUNT, value);
    }

    /**
     * Gets the attribute value for TotalPayment, using the alias name TotalPayment.
     * @return the TotalPayment
     */
    public Number getTotalPayment() {
        return (Number)getAttributeInternal(TOTALPAYMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for TotalPayment.
     * @param value value to set the TotalPayment
     */
    public void setTotalPayment(Number value) {
        setAttributeInternal(TOTALPAYMENT, value);
    }

    /**
     * Gets the attribute value for Variance, using the alias name Variance.
     * @return the Variance
     */
    public String getVariance() {
        return (String)getAttributeInternal(VARIANCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Variance.
     * @param value value to set the Variance
     */
    public void setVariance(String value) {
        setAttributeInternal(VARIANCE, value);
    }

    /**
     * Gets the attribute value for Memo, using the alias name Memo.
     * @return the Memo
     */
    public String getMemo() {
        return (String)getAttributeInternal(MEMO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Memo.
     * @param value value to set the Memo
     */
    public void setMemo(String value) {
        setAttributeInternal(MEMO, value);
    }

    /**
     * Gets the attribute value for InvoiceNumber, using the alias name InvoiceNumber.
     * @return the InvoiceNumber
     */
    public String getInvoiceNumber() {
        return (String)getAttributeInternal(INVOICENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvoiceNumber.
     * @param value value to set the InvoiceNumber
     */
    public void setInvoiceNumber(String value) {
        setAttributeInternal(INVOICENUMBER, value);
    }

    /**
     * Gets the attribute value for InvoiceBatchId, using the alias name InvoiceBatchId.
     * @return the InvoiceBatchId
     */
    public Number getInvoiceBatchId() {
        return (Number)getAttributeInternal(INVOICEBATCHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvoiceBatchId.
     * @param value value to set the InvoiceBatchId
     */
    public void setInvoiceBatchId(Number value) {
        setAttributeInternal(INVOICEBATCHID, value);
    }

    /**
     * Gets the attribute value for PaymentDate, using the alias name PaymentDate.
     * @return the value of PaymentDate
     */
    public Date getPaymentDate() {
        return (Date)getAttributeInternal(PAYMENTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymentDate.
     * @param value value to set the PaymentDate
     */
    public void setPaymentDate(Date value) {
        setAttributeInternal(PAYMENTDATE, value);
    }

    /**
     * Gets the attribute value for Ems, using the alias name Ems.
     * @return the value of Ems
     */
    public String getEms() {
        return (String)getAttributeInternal(EMS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ems.
     * @param value value to set the Ems
     */
    public void setEms(String value) {
        setAttributeInternal(EMS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity ContractLineImpl.
     */
    public ContractLineImpl getContractLine() {
        return (ContractLineImpl)getAttributeInternal(CONTRACTLINE);
    }

    /**
     * Sets <code>value</code> as the associated entity ContractLineImpl.
     */
    public void setContractLine(ContractLineImpl value) {
        setAttributeInternal(CONTRACTLINE, value);
    }

    /**
     * @return the associated entity com.xy.scpms.model.common.BaseEntity.
     */
    public InvoiceBatchImpl getInvoiceBatch() {
        return (InvoiceBatchImpl)getAttributeInternal(INVOICEBATCH);
    }

    /**
     * Sets <code>value</code> as the associated entity com.xy.scpms.model.common.BaseEntity.
     */
    public void setInvoiceBatch(InvoiceBatchImpl value) {
        setAttributeInternal(INVOICEBATCH, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getPayment() {
        return (RowIterator)getAttributeInternal(PAYMENT);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getInvoiceRequisition() {
        return (RowIterator)getAttributeInternal(INVOICEREQUISITION);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TotalAmtOfLine.
     */
    public RowSet getTotalAmtOfLine() {
        return (RowSet)getAttributeInternal(TOTALAMTOFLINE);
    }


    /**
     * Gets the view accessor <code>RowSet</code> MasterLine.
     */
    public RowSet getMasterLine() {
        return (RowSet)getAttributeInternal(MASTERLINE);
    }


    /**
     * Gets the view accessor <code>RowSet</code> ChangeHistoryView.
     */
    public RowSet getChangeHistoryView() {
        return (RowSet)getAttributeInternal(CHANGEHISTORYVIEW);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }


    protected void prepareForDML(int operation, TransactionEvent e) {
        super.prepareForDML(operation, e);

    }


}
